<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PetaPoco</name>
    </assembly>
    <members>
        <member name="T:PetaPoco.ColumnAttribute">
            <summary>
                Represents an attribute which can decorate a Poco property to mark the property as a column. It may also optionally
                supply the DB column name.
            </summary>
        </member>
        <member name="P:PetaPoco.ColumnAttribute.Name">
            <summary>
                The SQL name of the column
            </summary>
        </member>
        <member name="P:PetaPoco.ColumnAttribute.ForceToUtc">
            <summary>
                True if time and date values returned through this column should be forced to UTC DateTimeKind. (no conversion is
                applied - the Kind of the DateTime property
                is simply set to DateTimeKind.Utc instead of DateTimeKind.Unknown.
            </summary>
        </member>
        <member name="P:PetaPoco.ColumnAttribute.InsertTemplate">
            <summary>
                The insert template. If not null, this template is used for generating the insert section instead of the deafult
                string.Format("{0}{1}", paramPrefix, index"). Setting this allows DB related interactions, such as "CAST({0}{1} AS
                json)"
            </summary>
        </member>
        <member name="P:PetaPoco.ColumnAttribute.UpdateTemplate">
            <summary>
                The update template. If not null, this template is used for generating the update section instead of the deafult
                string.Format("{0} = {1}{2}", colName, paramPrefix, index"). Setting this allows DB related interactions, such as "{0} = CAST({1}{2} AS
                json)"
            </summary>
        </member>
        <member name="M:PetaPoco.ColumnAttribute.#ctor">
            <summary>
                Constructs a new instance of the <seealso cref="T:PetaPoco.ColumnAttribute" />.
            </summary>
        </member>
        <member name="M:PetaPoco.ColumnAttribute.#ctor(System.String)">
            <summary>
                Constructs a new instance of the <seealso cref="T:PetaPoco.ColumnAttribute" />.
            </summary>
            <param name="name">The name of the column.</param>
        </member>
        <member name="T:PetaPoco.ValueConverterAttribute">
            <summary>
            Represents an attribute which can decorate a Poco property conver value from database type to property type and conversely.
            </summary>
        </member>
        <member name="M:PetaPoco.ValueConverterAttribute.ConvertToDb(System.Object)">
            <summary>
            Function to convert property value to database type value.
            </summary>
            <param name="value">Property value</param>
            <returns>Converted database value</returns>
        </member>
        <member name="M:PetaPoco.ValueConverterAttribute.ConvertFromDb(System.Object)">
            <summary>
            Function to convert database value to property type value.
            </summary>
            <param name="value">Database value</param>
            <returns>Converted property type value</returns>
        </member>
        <member name="T:PetaPoco.AnsiString">
            <summary>
                Wrap strings in an instance of this class to force use of DBType.AnsiString
            </summary>
        </member>
        <member name="P:PetaPoco.AnsiString.Value">
            <summary>
                The string value
            </summary>
        </member>
        <member name="M:PetaPoco.AnsiString.#ctor(System.String)">
            <summary>
                Constructs an AnsiString
            </summary>
            <param name="str">The C# string to be converted to ANSI before being passed to the DB</param>
        </member>
        <member name="T:PetaPoco.ColumnInfo">
            <summary>
                Hold information about a column in the database.
            </summary>
            <remarks>
                Typically ColumnInfo is automatically populated from the attributes on a POCO object and it's properties. It can
                however also be returned from the IMapper interface to provide your owning bindings between the DB and your POCOs.
            </remarks>
        </member>
        <member name="P:PetaPoco.ColumnInfo.ColumnName">
            <summary>
                The SQL name of the column
            </summary>
        </member>
        <member name="P:PetaPoco.ColumnInfo.ResultColumn">
            <summary>
                True if this column returns a calculated value from the database and shouldn't be used in Insert and Update
                operations.
            </summary>
        </member>
        <member name="P:PetaPoco.ColumnInfo.ForceToUtc">
            <summary>
                True if time and date values returned through this column should be forced to UTC DateTimeKind. (no conversion is
                applied - the Kind of the DateTime property
                is simply set to DateTimeKind.Utc instead of DateTimeKind.Unknown.
            </summary>
        </member>
        <member name="P:PetaPoco.ColumnInfo.InsertTemplate">
            <summary>
                The insert template. If not null, this template is used for generating the insert section instead of the deafult
                string.Format("{0}{1}", paramPrefix, index"). Setting this allows DB related interactions, such as "CAST({0}{1} AS
                json)"
            </summary>
        </member>
        <member name="P:PetaPoco.ColumnInfo.UpdateTemplate">
            <summary>
                The update template. If not null, this template is used for generating the update section instead of the deafult
                string.Format("{0} = {1}{2}", colName, paramPrefix, index"). Setting this allows DB related interactions, such as "{0} = CAST({1}{2} AS
                json)"
            </summary>
        </member>
        <member name="M:PetaPoco.ColumnInfo.FromProperty(System.Reflection.PropertyInfo)">
            <summary>
                Creates and populates a ColumnInfo from the attributes of a POCO property.
            </summary>
            <param name="propertyInfo">The property whose column info is required</param>
            <returns>A ColumnInfo instance</returns>
        </member>
        <member name="T:PetaPoco.ConventionMapper">
            <summary>
                Represents a configurable convention mapper.
            </summary>
            <remarks>
                By default this mapper replaces <see cref="T:PetaPoco.StandardMapper" /> without change, which means backwards compatibility
                is kept.
            </remarks>
        </member>
        <member name="P:PetaPoco.ConventionMapper.GetSequenceName">
            <summary>
                Gets or sets the get sequence name logic.
            </summary>
        </member>
        <member name="P:PetaPoco.ConventionMapper.InflectColumnName">
            <summary>
                Gets or sets the inflect column name logic.
            </summary>
        </member>
        <member name="P:PetaPoco.ConventionMapper.InflectTableName">
            <summary>
                Gets or sets the inflect table name logic.
            </summary>
        </member>
        <member name="P:PetaPoco.ConventionMapper.IsPrimaryKeyAutoIncrement">
            <summary>
                Gets or sets the is primary key auto increment logic.
            </summary>
        </member>
        <member name="P:PetaPoco.ConventionMapper.MapColumn">
            <summary>
                Gets or sets the map column logic.
            </summary>
        </member>
        <member name="P:PetaPoco.ConventionMapper.MapPrimaryKey">
            <summary>
                Gets or set the map primary key logic.
            </summary>
        </member>
        <member name="P:PetaPoco.ConventionMapper.MapTable">
            <summary>
                Gets or sets the map table logic.
            </summary>
        </member>
        <member name="P:PetaPoco.ConventionMapper.FromDbConverter">
            <summary>
                Gets or sets the from db convert logic.
            </summary>
        </member>
        <member name="P:PetaPoco.ConventionMapper.ToDbConverter">
            <summary>
                Gets or sets the to db converter logic.
            </summary>
        </member>
        <member name="M:PetaPoco.ConventionMapper.#ctor">
            <summary>
                Constructs a new instance of convention mapper.
            </summary>
        </member>
        <member name="M:PetaPoco.ConventionMapper.GetTableInfo(System.Type)">
            <summary>
                Get information about the table associated with a POCO class
            </summary>
            <param name="pocoType">The poco type.</param>
            <returns>A TableInfo instance</returns>
            <remarks>
                This method must return a valid TableInfo.
                To create a TableInfo from a POCO's attributes, use TableInfo.FromPoco
            </remarks>
        </member>
        <member name="M:PetaPoco.ConventionMapper.GetColumnInfo(System.Reflection.PropertyInfo)">
            <summary>
                Get information about the column associated with a property of a POCO
            </summary>
            <param name="pocoProperty">The PropertyInfo of the property being queried</param>
            <returns>A reference to a ColumnInfo instance, or null to ignore this property</returns>
            <remarks>
                To create a ColumnInfo from a property's attributes, use PropertyInfo.FromProperty
            </remarks>
        </member>
        <member name="M:PetaPoco.ConventionMapper.GetFromDbConverter(System.Reflection.PropertyInfo,System.Type)">
            <summary>
                Supply a function to convert a database value to the correct property value
            </summary>
            <param name="targetProperty">The target property</param>
            <param name="sourceType">The type of data returned by the DB</param>
            <returns>A Func that can do the conversion, or null for no conversion</returns>
        </member>
        <member name="M:PetaPoco.ConventionMapper.GetToDbConverter(System.Reflection.PropertyInfo)">
            <summary>
                Supply a function to convert a property value into a database value
            </summary>
            <param name="sourceProperty">The property to be converted</param>
            <returns>A Func that can do the conversion</returns>
            <remarks>
                This conversion is only used for converting values from POCO's that are
                being Inserted or Updated.
                Conversion is not available for parameter values passed directly to queries.
            </remarks>
        </member>
        <member name="M:PetaPoco.GridReader.#ctor(PetaPoco.Database,System.Data.IDbCommand,System.Data.IDataReader,PetaPoco.IMapper)">
            <summary>
            The control structure for a multi-result set query
            </summary>
            <param name="database"></param>
            <param name="command"></param>
            <param name="reader"></param>
            <param name="defaultMapper"></param>
        </member>
        <member name="M:PetaPoco.GridReader.Read``1">
            <summary>
            Reads from a GridReader, returning the results as an IEnumerable collection
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <returns>An enumerable collection of result records</returns>
        </member>
        <member name="M:PetaPoco.GridReader.Read``2">
            <summary>
            Perform a multi-poco read from a GridReader
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.GridReader.Read``3">
            <summary>
            Perform a multi-poco read from a GridReader
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.GridReader.Read``4">
            <summary>
            Perform a multi-poco read from a GridReader
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The forth POCO type</typeparam>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.GridReader.Read``3(System.Func{``0,``1,``2})">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.GridReader.Read``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.GridReader.Read``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The forth POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.GridReader.SinglePocoFromIDataReader``1(System.Int32)">
            <summary>
            Read data to a single poco
            </summary>
            <typeparam name="T">The type representing a row in the result set</typeparam>
            <param name="index">Reader row to be read from the underlying IDataReader</param>
            <returns></returns>
        </member>
        <member name="M:PetaPoco.GridReader.MultiPocoFromIDataReader``1(System.Int32,System.Type[],System.Object)">
            <summary>
            Read data to multiple pocos
            </summary>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="index">Reader row to be read from the underlying IDataReader</param>
            <param name="types">An array of Types representing the POCO types of the returned result set.</param>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.GridReader.NextResult">
            <summary>
            Advance the IDataReader to the NextResult, if available
            </summary>
        </member>
        <member name="M:PetaPoco.GridReader.Dispose">
            <summary>
            Dispose the grid, closing and disposing both the underlying reader, command and shared connection
            </summary>
        </member>
        <member name="M:PetaPoco.IGridReader.Read``1">
            <summary>
            Reads from a GridReader, returning the results as an IEnumerable collection
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <returns>An enumerable collection of result records</returns>
        </member>
        <member name="M:PetaPoco.IGridReader.Read``2">
            <summary>
            Perform a multi-poco read from a GridReader
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.IGridReader.Read``3">
            <summary>
            Perform a multi-poco read from a GridReader
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.IGridReader.Read``4">
            <summary>
            Perform a multi-poco read from a GridReader
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The forth POCO type</typeparam>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.IGridReader.Read``3(System.Func{``0,``1,``2})">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.IGridReader.Read``4(System.Func{``0,``1,``2,``3})">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.IGridReader.Read``5(System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The forth POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="T:PetaPoco.Core.Inflection.Inflector">
            <summary>
                Static inflection helper
            </summary>
        </member>
        <member name="P:PetaPoco.Core.Inflection.Inflector.Instance">
            <summary>
                Gets or sets the <see cref="T:PetaPoco.Core.Inflection.IInflector" /> instacne.
            </summary>
            <param name="value">
                The inflector to set as the default instance, or null to restore the default
                <see cref="T:PetaPoco.Core.Inflection.EnglishInflector" />.
            </param>
            <remarks>
                By default the <see cref="T:PetaPoco.Core.Inflection.EnglishInflector" /> instance used.
            </remarks>
            <returns>
                The currently set <see cref="T:PetaPoco.Core.Inflection.IInflector" /> instance.
            </returns>
        </member>
        <member name="T:PetaPoco.Core.Inflection.EnglishInflector">
            <summary>
                Author: Originally written (I believe) by Andrew Peters
                Source: Scott Kirkland (https://github.com/srkirkland/Inflector)
            </summary>
        </member>
        <member name="M:PetaPoco.Core.Inflection.EnglishInflector.Pluralise(System.String)">
            <summary>
                Pluralises a word.
            </summary>
            <example>
                inflect.Pluralise("search").ShouldBe("searches");
                inflect.Pluralise("stack").ShouldBe("stacks");
                inflect.Pluralise("fish").ShouldBe("fish");
            </example>
            <param name="word">The word to pluralise.</param>
            <returns>The pluralised word.</returns>
        </member>
        <member name="M:PetaPoco.Core.Inflection.EnglishInflector.Singularise(System.String)">
            <summary>
                Singularises a word.
            </summary>
            <example>
                inflect.Singularise("searches").ShouldBe("search");
                inflect.Singularise("stacks").ShouldBe("stack");
                inflect.Singularise("fish").ShouldBe("fish");
            </example>
            <param name="word">The word to signularise.</param>
            <returns>The signularised word.</returns>
        </member>
        <member name="M:PetaPoco.Core.Inflection.EnglishInflector.Titleise(System.String)">
            <summary>
                Titleises the word. (title => Title, the_brown_fox => TheBrownFox)
            </summary>
            <example>
                inflect.Titleise("some title").ShouldBe("Some Title");
                inflect.Titleise("some-title").ShouldBe("Some Title");
                inflect.Titleise("sometitle").ShouldBe("Sometitle");
                inflect.Titleise("some_title:_the_beginning").ShouldBe("Some Title: The Beginning");
            </example>
            <param name="word">The word to titleise.</param>
            <returns>The titleised word.</returns>
        </member>
        <member name="M:PetaPoco.Core.Inflection.EnglishInflector.Humanise(System.String)">
            <summary>
                Humanizes the word.
            </summary>
            <example>
                inflect.Humanise("some_title").ShouldBe("Some title");
                inflect.Humanise("some-title").ShouldBe("Some-title");
                inflect.Humanise("Some_title").ShouldBe("Some title");
                inflect.Humanise("someTitle").ShouldBe("Sometitle");
                inflect.Humanise("someTitle_Another").ShouldBe("Sometitle another");
            </example>
            <param name="lowercaseAndUnderscoredWord">The word to humanise.</param>
            <returns>The humanized word.</returns>
        </member>
        <member name="M:PetaPoco.Core.Inflection.EnglishInflector.Pascalise(System.String)">
            <summary>
                Pascalises the word.
            </summary>
            <example>
                inflect.Pascalise("customer").ShouldBe("Customer");
                inflect.Pascalise("customer_name").ShouldBe("CustomerName");
                inflect.Pascalise("customer name").ShouldBe("Customer name");
            </example>
            <param name="lowercaseAndUnderscoredWord">The word to pascalise.</param>
            <returns>The pascalied word.</returns>
        </member>
        <member name="M:PetaPoco.Core.Inflection.EnglishInflector.Camelise(System.String)">
            <summary>
                Camelises the word.
            </summary>
            <example>
                inflect.Camelise("Customer").ShouldBe("customer");
                inflect.Camelise("customer_name").ShouldBe("customerName");
                inflect.Camelise("customer_first_name").ShouldBe("customerFirstName");
                inflect.Camelise("customer name").ShouldBe("customer name");
            </example>
            <param name="lowercaseAndUnderscoredWord">The word to camelise.</param>
            <returns>The camelised word.</returns>
        </member>
        <member name="M:PetaPoco.Core.Inflection.EnglishInflector.Underscore(System.String)">
            <summary>
                Underscores the word.
            </summary>
            <example>
                inflect.Underscore("SomeTitle").ShouldBe("some_title");
                inflect.Underscore("someTitle").ShouldBe("some_title");
                inflect.Underscore("some title that will be underscored").ShouldBe("some_title_that_will_be_underscored");
                inflect.Underscore("SomeTitleThatWillBeUnderscored").ShouldBe("some_title_that_will_be_underscored");
            </example>
            <param name="pascalCasedWord">The word to underscore.</param>
            <returns>The underscored word.</returns>
        </member>
        <member name="M:PetaPoco.Core.Inflection.EnglishInflector.Capitalise(System.String)">
            <summary>
                Capitalises the word.
            </summary>
            <example>
                inflect.Capitalise("some title").ShouldBe("Some title");
                inflect.Capitalise("some Title").ShouldBe("Some title");
                inflect.Capitalise("SOMETITLE").ShouldBe("Sometitle");
                inflect.Capitalise("someTitle").ShouldBe("Sometitle");
                inflect.Capitalise("some title goes here").ShouldBe("Some title goes here");
            </example>
            <param name="word">The word to capitalise.</param>
            <returns>The capitalised word.</returns>
        </member>
        <member name="M:PetaPoco.Core.Inflection.EnglishInflector.Uncapitalise(System.String)">
            <summary>
                Uncapitalises the word.
            </summary>
            <example>
                inflect.Uncapitalise("Some title").ShouldBe("some title");
                inflect.Uncapitalise("Some Title").ShouldBe("some Title");
                inflect.Uncapitalise("SOMETITLE").ShouldBe("sOMETITLE");
                inflect.Uncapitalise("someTitle").ShouldBe("someTitle");
                inflect.Uncapitalise("Some title goes here").ShouldBe("some title goes here");
            </example>
            <param name="word">The word to uncapitalise.</param>
            <returns>The uncapitalised word.</returns>
        </member>
        <member name="M:PetaPoco.Core.Inflection.EnglishInflector.Ordinalise(System.String)">
            <summary>
                Ordinalises the number.
            </summary>
            <example>
                inflect.Ordinalise(0).ShouldBe("0th");
                inflect.Ordinalise(1).ShouldBe("1st");
                inflect.Ordinalise(2).ShouldBe("2nd");
                inflect.Ordinalise(3).ShouldBe("3rd");
                inflect.Ordinalise(101).ShouldBe("101st");
                inflect.Ordinalise(104).ShouldBe("104th");
                inflect.Ordinalise(1000).ShouldBe("1000th");
                inflect.Ordinalise(1001).ShouldBe("1001st");
            </example>
            <param name="number">The number to ordinalise.</param>
            <returns>The ordinalised number.</returns>
        </member>
        <member name="M:PetaPoco.Core.Inflection.EnglishInflector.Ordinalise(System.Int32)">
            <summary>
                Ordinalises the number.
            </summary>
            <example>
                inflect.Ordinalise("0").ShouldBe("0th");
                inflect.Ordinalise("1").ShouldBe("1st");
                inflect.Ordinalise("2").ShouldBe("2nd");
                inflect.Ordinalise("3").ShouldBe("3rd");
                inflect.Ordinalise("100").ShouldBe("100th");
                inflect.Ordinalise("101").ShouldBe("101st");
                inflect.Ordinalise("1000").ShouldBe("1000th");
                inflect.Ordinalise("1001").ShouldBe("1001st");
            </example>
            <param name="number">The number to ordinalise.</param>
            <returns>The ordinalised number.</returns>
        </member>
        <member name="M:PetaPoco.Core.Inflection.EnglishInflector.Dasherise(System.String)">
            <summary>
                Dasherises the word.
            </summary>
            <example>
                inflect.Dasherise("some_title").ShouldBe("some-title");
                inflect.Dasherise("some-title").ShouldBe("some-title");
                inflect.Dasherise("some_title_goes_here").ShouldBe("some-title-goes-here");
                inflect.Dasherise("some_title and_another").ShouldBe("some-title and-another");
            </example>
            <param name="underscoredWord">The word to dasherise.</param>
            <returns>The dasherised word.</returns>
        </member>
        <member name="T:PetaPoco.Core.Inflection.IInflector">
            <summary>
                Specifies the inflection contract.
            </summary>
        </member>
        <member name="M:PetaPoco.Core.Inflection.IInflector.Pluralise(System.String)">
            <summary>
                Pluralises a word.
            </summary>
            <example>
                inflect.Pluralise("search").ShouldBe("searches");
                inflect.Pluralise("stack").ShouldBe("stacks");
                inflect.Pluralise("fish").ShouldBe("fish");
            </example>
            <param name="word">The word to pluralise.</param>
            <returns>The pluralised word.</returns>
        </member>
        <member name="M:PetaPoco.Core.Inflection.IInflector.Singularise(System.String)">
            <summary>
                Singularises a word.
            </summary>
            <example>
                inflect.Singularise("searches").ShouldBe("search");
                inflect.Singularise("stacks").ShouldBe("stack");
                inflect.Singularise("fish").ShouldBe("fish");
            </example>
            <param name="word">The word to signularise.</param>
            <returns>The signularised word.</returns>
        </member>
        <member name="M:PetaPoco.Core.Inflection.IInflector.Titleise(System.String)">
            <summary>
                Titleises the word. (title => Title, the_brown_fox => TheBrownFox)
            </summary>
            <example>
                inflect.Titleise("some title").ShouldBe("Some Title");
                inflect.Titleise("some-title").ShouldBe("Some Title");
                inflect.Titleise("sometitle").ShouldBe("Sometitle");
                inflect.Titleise("some_title:_the_beginning").ShouldBe("Some Title: The Beginning");
            </example>
            <param name="word">The word to titleise.</param>
            <returns>The titleised word.</returns>
        </member>
        <member name="M:PetaPoco.Core.Inflection.IInflector.Humanise(System.String)">
            <summary>
                Humanizes the word.
            </summary>
            <example>
                inflect.Humanise("some_title").ShouldBe("Some title");
                inflect.Humanise("some-title").ShouldBe("Some-title");
                inflect.Humanise("Some_title").ShouldBe("Some title");
                inflect.Humanise("someTitle").ShouldBe("Sometitle");
                inflect.Humanise("someTitle_Another").ShouldBe("Sometitle another");
            </example>
            <param name="lowercaseAndUnderscoredWord">The word to humanise.</param>
            <returns>The humanized word.</returns>
        </member>
        <member name="M:PetaPoco.Core.Inflection.IInflector.Pascalise(System.String)">
            <summary>
                Pascalises the word.
            </summary>
            <example>
                inflect.Pascalise("customer").ShouldBe("Customer");
                inflect.Pascalise("customer_name").ShouldBe("CustomerName");
                inflect.Pascalise("customer name").ShouldBe("Customer name");
            </example>
            <param name="lowercaseAndUnderscoredWord">The word to pascalise.</param>
            <returns>The pascalied word.</returns>
        </member>
        <member name="M:PetaPoco.Core.Inflection.IInflector.Camelise(System.String)">
            <summary>
                Camelises the word.
            </summary>
            <example>
                inflect.Camelise("Customer").ShouldBe("customer");
                inflect.Camelise("customer_name").ShouldBe("customerName");
                inflect.Camelise("customer_first_name").ShouldBe("customerFirstName");
                inflect.Camelise("customer name").ShouldBe("customer name");
            </example>
            <param name="lowercaseAndUnderscoredWord">The word to camelise.</param>
            <returns>The camelised word.</returns>
        </member>
        <member name="M:PetaPoco.Core.Inflection.IInflector.Underscore(System.String)">
            <summary>
                Underscores the word.
            </summary>
            <example>
                inflect.Underscore("SomeTitle").ShouldBe("some_title");
                inflect.Underscore("someTitle").ShouldBe("some_title");
                inflect.Underscore("some title that will be underscored").ShouldBe("some_title_that_will_be_underscored");
                inflect.Underscore("SomeTitleThatWillBeUnderscored").ShouldBe("some_title_that_will_be_underscored");
            </example>
            <param name="pascalCasedWord">The word to underscore.</param>
            <returns>The underscored word.</returns>
        </member>
        <member name="M:PetaPoco.Core.Inflection.IInflector.Capitalise(System.String)">
            <summary>
                Capitalises the word.
            </summary>
            <example>
                inflect.Capitalise("some title").ShouldBe("Some title");
                inflect.Capitalise("some Title").ShouldBe("Some title");
                inflect.Capitalise("SOMETITLE").ShouldBe("Sometitle");
                inflect.Capitalise("someTitle").ShouldBe("Sometitle");
                inflect.Capitalise("some title goes here").ShouldBe("Some title goes here");
            </example>
            <param name="word">The word to capitalise.</param>
            <returns>The capitalised word.</returns>
        </member>
        <member name="M:PetaPoco.Core.Inflection.IInflector.Uncapitalise(System.String)">
            <summary>
                Uncapitalises the word.
            </summary>
            <example>
                inflect.Uncapitalise("Some title").ShouldBe("some title");
                inflect.Uncapitalise("Some Title").ShouldBe("some Title");
                inflect.Uncapitalise("SOMETITLE").ShouldBe("sOMETITLE");
                inflect.Uncapitalise("someTitle").ShouldBe("someTitle");
                inflect.Uncapitalise("Some title goes here").ShouldBe("some title goes here");
            </example>
            <param name="word">The word to uncapitalise.</param>
            <returns>The uncapitalised word.</returns>
        </member>
        <member name="M:PetaPoco.Core.Inflection.IInflector.Ordinalise(System.String)">
            <summary>
                Ordinalises the number.
            </summary>
            <example>
                inflect.Ordinalise(0).ShouldBe("0th");
                inflect.Ordinalise(1).ShouldBe("1st");
                inflect.Ordinalise(2).ShouldBe("2nd");
                inflect.Ordinalise(3).ShouldBe("3rd");
                inflect.Ordinalise(101).ShouldBe("101st");
                inflect.Ordinalise(104).ShouldBe("104th");
                inflect.Ordinalise(1000).ShouldBe("1000th");
                inflect.Ordinalise(1001).ShouldBe("1001st");
            </example>
            <param name="number">The number to ordinalise.</param>
            <returns>The ordinalised number.</returns>
        </member>
        <member name="M:PetaPoco.Core.Inflection.IInflector.Ordinalise(System.Int32)">
            <summary>
                Ordinalises the number.
            </summary>
            <example>
                inflect.Ordinalise("0").ShouldBe("0th");
                inflect.Ordinalise("1").ShouldBe("1st");
                inflect.Ordinalise("2").ShouldBe("2nd");
                inflect.Ordinalise("3").ShouldBe("3rd");
                inflect.Ordinalise("100").ShouldBe("100th");
                inflect.Ordinalise("101").ShouldBe("101st");
                inflect.Ordinalise("1000").ShouldBe("1000th");
                inflect.Ordinalise("1001").ShouldBe("1001st");
            </example>
            <param name="number">The number to ordinalise.</param>
            <returns>The ordinalised number.</returns>
        </member>
        <member name="M:PetaPoco.Core.Inflection.IInflector.Dasherise(System.String)">
            <summary>
                Dasherises the word.
            </summary>
            <example>
                inflect.Dasherise("some_title").ShouldBe("some-title");
                inflect.Dasherise("some-title").ShouldBe("some-title");
                inflect.Dasherise("some_title_goes_here").ShouldBe("some-title-goes-here");
                inflect.Dasherise("some_title and_another").ShouldBe("some-title and-another");
            </example>
            <param name="underscoredWord">The word to dasherise.</param>
            <returns>The dasherised word.</returns>
        </member>
        <member name="T:PetaPoco.Core.IProvider">
            <summary>
                Represents a contract for a database type provider.
            </summary>
        </member>
        <member name="P:PetaPoco.Core.IProvider.PagingUtility">
            <summary>
                Gets the <seealso cref="T:PetaPoco.Utilities.IPagingHelper" /> this provider supplies.
            </summary>
        </member>
        <member name="P:PetaPoco.Core.IProvider.HasNativeGuidSupport">
            <summary>
                Gets a flag for whether the DB has native support for GUID/UUID.
            </summary>
        </member>
        <member name="M:PetaPoco.Core.IProvider.EscapeTableName(System.String)">
            <summary>
                Escape a tablename into a suitable format for the associated database provider.
            </summary>
            <param name="tableName">
                The name of the table (as specified by the client program, or as attributes on the associated
                POCO class.
            </param>
            <returns>The escaped table name</returns>
        </member>
        <member name="M:PetaPoco.Core.IProvider.EscapeSqlIdentifier(System.String)">
            <summary>
                Escape and arbitary SQL identifier into a format suitable for the associated database provider
            </summary>
            <param name="sqlIdentifier">The SQL identifier to be escaped</param>
            <returns>The escaped identifier</returns>
        </member>
        <member name="M:PetaPoco.Core.IProvider.BuildPageQuery(System.Int64,System.Int64,PetaPoco.Utilities.SQLParts,System.Object[]@)">
            <summary>
                Builds an SQL query suitable for performing page based queries to the database
            </summary>
            <param name="skip">The number of rows that should be skipped by the query</param>
            <param name="take">The number of rows that should be retruend by the query</param>
            <param name="parts">The original SQL query after being parsed into it's component parts</param>
            <param name="args">Arguments to any embedded parameters in the SQL query</param>
            <returns>The final SQL query that should be executed.</returns>
        </member>
        <member name="M:PetaPoco.Core.IProvider.MapParameterValue(System.Object)">
            <summary>
                Converts a supplied C# object value into a value suitable for passing to the database
            </summary>
            <param name="value">The value to convert</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:PetaPoco.Core.IProvider.PreExecute(System.Data.IDbCommand)">
            <summary>
                Called immediately before a command is executed, allowing for modification of the IDbCommand before it's passed to
                the database provider
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:PetaPoco.Core.IProvider.GetExistsSql">
            <summary>
                Returns an SQL Statement that can check for the existence of a row in the database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PetaPoco.Core.IProvider.ExecuteInsert(PetaPoco.Database,System.Data.IDbCommand,System.String)">
            <summary>
                Performs an Insert operation
            </summary>
            <param name="database">The calling Database object</param>
            <param name="cmd">The insert command to be executed</param>
            <param name="primaryKeyName">The primary key of the table being inserted into</param>
            <returns>The ID of the newly inserted record</returns>
        </member>
        <member name="M:PetaPoco.Core.IProvider.GetInsertOutputClause(System.String)">
            <summary>
                Returns an SQL expression that can be used to specify the return value of auto incremented columns.
            </summary>
            <param name="primaryKeyName">The primary key of the row being inserted.</param>
            <returns>An expression describing how to return the new primary key value</returns>
            <remarks>See the SQLServer database provider for an example of how this method is used.</remarks>
        </member>
        <member name="M:PetaPoco.Core.IProvider.GetParameterPrefix(System.String)">
            <summary>
                Returns the prefix used to delimit parameters in SQL query strings.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns>The providers character for prefixing a query parameter.</returns>
        </member>
        <member name="M:PetaPoco.Core.IProvider.GetAutoIncrementExpression(PetaPoco.TableInfo)">
            <summary>
                Return an SQL expression that can be used to populate the primary key column of an auto-increment column.
            </summary>
            <param name="tableInfo">Table info describing the table</param>
            <returns>An SQL expressions</returns>
            <remarks>See the Oracle database type for an example of how this method is used.</remarks>
        </member>
        <member name="T:PetaPoco.Core.DatabaseProvider">
            <summary>
                Base class for DatabaseType handlers - provides default/common handling for different database engines
            </summary>
        </member>
        <member name="M:PetaPoco.Core.DatabaseProvider.GetFactory">
            <summary>
                Gets the DbProviderFactory for this database provider.
            </summary>
            <returns>The provider factory.</returns>
        </member>
        <member name="P:PetaPoco.Core.DatabaseProvider.HasNativeGuidSupport">
            <summary>
                Gets a flag for whether the DB has native support for GUID/UUID.
            </summary>
        </member>
        <member name="P:PetaPoco.Core.DatabaseProvider.PagingUtility">
            <summary>
                Gets the <seealso cref="T:PetaPoco.Utilities.IPagingHelper" /> this provider supplies.
            </summary>
        </member>
        <member name="M:PetaPoco.Core.DatabaseProvider.EscapeTableName(System.String)">
            <summary>
                Escape a tablename into a suitable format for the associated database provider.
            </summary>
            <param name="tableName">
                The name of the table (as specified by the client program, or as attributes on the associated
                POCO class.
            </param>
            <returns>The escaped table name</returns>
        </member>
        <member name="M:PetaPoco.Core.DatabaseProvider.EscapeSqlIdentifier(System.String)">
            <summary>
                Escape and arbitary SQL identifier into a format suitable for the associated database provider
            </summary>
            <param name="sqlIdentifier">The SQL identifier to be escaped</param>
            <returns>The escaped identifier</returns>
        </member>
        <member name="M:PetaPoco.Core.DatabaseProvider.GetParameterPrefix(System.String)">
            <summary>
                Returns the prefix used to delimit parameters in SQL query strings.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns>The providers character for prefixing a query parameter.</returns>
        </member>
        <member name="M:PetaPoco.Core.DatabaseProvider.MapParameterValue(System.Object)">
            <summary>
                Converts a supplied C# object value into a value suitable for passing to the database
            </summary>
            <param name="value">The value to convert</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:PetaPoco.Core.DatabaseProvider.PreExecute(System.Data.IDbCommand)">
            <summary>
                Called immediately before a command is executed, allowing for modification of the IDbCommand before it's passed to
                the database provider
            </summary>
            <param name="cmd"></param>
        </member>
        <member name="M:PetaPoco.Core.DatabaseProvider.BuildPageQuery(System.Int64,System.Int64,PetaPoco.Utilities.SQLParts,System.Object[]@)">
            <summary>
                Builds an SQL query suitable for performing page based queries to the database
            </summary>
            <param name="skip">The number of rows that should be skipped by the query</param>
            <param name="take">The number of rows that should be retruend by the query</param>
            <param name="parts">The original SQL query after being parsed into it's component parts</param>
            <param name="args">Arguments to any embedded parameters in the SQL query</param>
            <returns>The final SQL query that should be executed.</returns>
        </member>
        <member name="M:PetaPoco.Core.DatabaseProvider.GetExistsSql">
            <summary>
                Returns an SQL Statement that can check for the existence of a row in the database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PetaPoco.Core.DatabaseProvider.GetAutoIncrementExpression(PetaPoco.TableInfo)">
            <summary>
                Return an SQL expression that can be used to populate the primary key column of an auto-increment column.
            </summary>
            <param name="tableInfo">Table info describing the table</param>
            <returns>An SQL expressions</returns>
            <remarks>See the Oracle database type for an example of how this method is used.</remarks>
        </member>
        <member name="M:PetaPoco.Core.DatabaseProvider.GetInsertOutputClause(System.String)">
            <summary>
                Returns an SQL expression that can be used to specify the return value of auto incremented columns.
            </summary>
            <param name="primaryKeyName">The primary key of the row being inserted.</param>
            <returns>An expression describing how to return the new primary key value</returns>
            <remarks>See the SQLServer database provider for an example of how this method is used.</remarks>
        </member>
        <member name="M:PetaPoco.Core.DatabaseProvider.ExecuteInsert(PetaPoco.Database,System.Data.IDbCommand,System.String)">
            <summary>
                Performs an Insert operation
            </summary>
            <param name="database">The calling Database object</param>
            <param name="cmd">The insert command to be executed</param>
            <param name="primaryKeyName">The primary key of the table being inserted into</param>
            <returns>The ID of the newly inserted record</returns>
        </member>
        <member name="M:PetaPoco.Core.DatabaseProvider.GetFactory(System.String[])">
            <summary>
                Returns the .net standard conforming DbProviderFactory.
            </summary>
            <param name="assemblyQualifiedNames">The assembly qualified name of the provider factory.</param>
            <returns>The db provider factory.</returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="assemblyQualifiedNames" /> does not match a type.</exception>
        </member>
        <member name="M:PetaPoco.Core.DatabaseProvider.Resolve(System.Type,System.Boolean,System.String)">
            <summary>
                Look at the type and provider name being used and instantiate a suitable DatabaseType instance.
            </summary>
            <param name="type">The type name.</param>
            <param name="allowDefault">A flag that when set allows the default <see cref="T:PetaPoco.Providers.SqlServerDatabaseProvider"/> to be returned if not match is found.</param>
            <param name="connectionString">The connection string.</param>
            <returns>The database provider.</returns>
        </member>
        <member name="M:PetaPoco.Core.DatabaseProvider.Resolve(System.String,System.Boolean,System.String)">
            <summary>
                Look at the type and provider name being used and instantiate a suitable DatabaseType instance.
            </summary>
            <param name="providerName">The provider name.</param>
            <param name="allowDefault">A flag that when set allows the default <see cref="T:PetaPoco.Providers.SqlServerDatabaseProvider"/> to be returned if not match is found.</param>
            <param name="connectionString">The connection string.</param>
            <returns>The database type.</returns>
        </member>
        <member name="M:PetaPoco.Core.DatabaseProvider.Unwrap(System.Data.Common.DbProviderFactory)">
            <summary>
                Unwraps a wrapped <see cref="T:System.Data.Common.DbProviderFactory"/>.
            </summary>
            <param name="factory">The factory to unwrap.</param>
            <returns>The unwrapped factory or the original factory if no wrapping occurred.</returns>
        </member>
        <member name="T:PetaPoco.ITransaction">
            <summary>
                Represents the contract for the transaction.
            </summary>
            <remarks>
                A PetaPoco helper to support transactions using the using syntax.
            </remarks>
        </member>
        <member name="M:PetaPoco.ITransaction.Complete">
            <summary>
                Completes the transaction. Not calling complete will cause the transaction to rollback on dispose.
            </summary>
        </member>
        <member name="T:PetaPoco.Mappers">
            <summary>
                This static manages registation of IMapper instances with PetaPoco
            </summary>
        </member>
        <member name="M:PetaPoco.Mappers.Register(System.Reflection.Assembly,PetaPoco.IMapper)">
            <summary>
                Registers a mapper for all types in a specific assembly
            </summary>
            <param name="assembly">The assembly whose types are to be managed by this mapper</param>
            <param name="mapper">The IMapper implementation</param>
        </member>
        <member name="M:PetaPoco.Mappers.Register(System.Type,PetaPoco.IMapper)">
            <summary>
                Registers a mapper for a single POCO type
            </summary>
            <param name="type">The type to be managed by this mapper</param>
            <param name="mapper">The IMapper implementation</param>
        </member>
        <member name="M:PetaPoco.Mappers.Revoke(System.Reflection.Assembly)">
            <summary>
                Remove all mappers for all types in a specific assembly
            </summary>
            <param name="assembly">The assembly whose mappers are to be revoked</param>
        </member>
        <member name="M:PetaPoco.Mappers.Revoke(System.Type)">
            <summary>
                Remove the mapper for a specific type
            </summary>
            <param name="type">The type whose mapper is to be removed</param>
        </member>
        <member name="M:PetaPoco.Mappers.Revoke(PetaPoco.IMapper)">
            <summary>
                Revoke an instance of a mapper
            </summary>
            <param name="mapper">The IMapper to be revkoed</param>
        </member>
        <member name="M:PetaPoco.Mappers.RevokeAll">
            <summary>
                Revokes all registered mappers.
            </summary>
        </member>
        <member name="M:PetaPoco.Mappers.GetMapper(System.Type,PetaPoco.IMapper)">
            <summary>
                Retrieve the IMapper implementation to be used for a specified POCO type.
            </summary>
            <param name="entityType">The entity type to get the mapper for.</param>
            <param name="defaultMapper">The default mapper to use when non is registered for the type.</param>
            <returns>The mapper for the given type.</returns>
        </member>
        <member name="T:PetaPoco.StandardMapper">
            <summary>
                StandardMapper is the default implementation of IMapper used by PetaPoco
            </summary>
        </member>
        <member name="M:PetaPoco.StandardMapper.GetTableInfo(System.Type)">
            <summary>
                Get information about the table associated with a POCO class
            </summary>
            <param name="pocoType">The poco type.</param>
            <returns>A TableInfo instance</returns>
            <remarks>
                This method must return a valid TableInfo.
                To create a TableInfo from a POCO's attributes, use TableInfo.FromPoco
            </remarks>
        </member>
        <member name="M:PetaPoco.StandardMapper.GetColumnInfo(System.Reflection.PropertyInfo)">
            <summary>
                Get information about the column associated with a property of a POCO
            </summary>
            <param name="pocoProperty">The PropertyInfo of the property being queried</param>
            <returns>A reference to a ColumnInfo instance, or null to ignore this property</returns>
            <remarks>
                To create a ColumnInfo from a property's attributes, use PropertyInfo.FromProperty
            </remarks>
        </member>
        <member name="M:PetaPoco.StandardMapper.GetFromDbConverter(System.Reflection.PropertyInfo,System.Type)">
            <summary>
                Supply a function to convert a database value to the correct property value
            </summary>
            <param name="targetProperty">The target property</param>
            <param name="sourceType">The type of data returned by the DB</param>
            <returns>A Func that can do the conversion, or null for no conversion</returns>
        </member>
        <member name="M:PetaPoco.StandardMapper.GetToDbConverter(System.Reflection.PropertyInfo)">
            <summary>
                Supply a function to convert a property value into a database value
            </summary>
            <param name="sourceProperty">The property to be converted</param>
            <returns>A Func that can do the conversion</returns>
            <remarks>
                This conversion is only used for converting values from POCO's that are
                being Inserted or Updated.
                Conversion is not available for parameter values passed directly to queries.
            </remarks>
        </member>
        <member name="T:PetaPoco.DatabaseConfiguration">
            <summary>
                A helper class which enables fluent configuration.
            </summary>
        </member>
        <member name="M:PetaPoco.DatabaseConfiguration.#ctor">
            <summary>
                Private constructor to force usage of static build method.
            </summary>
        </member>
        <member name="M:PetaPoco.DatabaseConfiguration.Build">
            <summary>
                Starts a new PetaPoco build configuration.
            </summary>
            <returns>An instance of <see cref="T:PetaPoco.IDatabaseBuildConfiguration" /> to form a fluent interface.</returns>
        </member>
        <member name="T:PetaPoco.DatabaseConfigurationExtensions">
            <summary>
                A static helper class where extensions for <see cref="T:PetaPoco.IDatabaseBuildConfiguration" /> are placed.
            </summary>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingCommandTimeout(PetaPoco.IDatabaseBuildConfiguration,System.Int32)">
            <summary>
                Adds a command timeout - see <see cref="P:PetaPoco.IDatabase.CommandTimeout" />.
            </summary>
            <param name="source">The configuration source.</param>
            <param name="seconds">The timeout in seconds.</param>
            <exception cref="T:System.ArgumentException">Thrown when seconds is less than 1.</exception>
            <returns>The configuration source to form a fluent interface.</returns>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.WithNamedParams(PetaPoco.IDatabaseBuildConfiguration)">
            <summary>
                Enables named params - see <see cref="P:PetaPoco.IDatabase.EnableNamedParams" />.
            </summary>
            <param name="source">The configuration source.</param>
            <returns>The configuration source to form a fluent interface.</returns>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.WithoutNamedParams(PetaPoco.IDatabaseBuildConfiguration)">
            <summary>
                Disables named params - see <see cref="P:PetaPoco.IDatabase.EnableNamedParams" />.
            </summary>
            <param name="source">The configuration source.</param>
            <returns>The configuration source to form a fluent interface.</returns>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingProvider``1(PetaPoco.IDatabaseBuildConfiguration,``0)">
            <summary>
                Specifies the provider to be used. - see <see cref="P:PetaPoco.IDatabase.Provider" />.
            </summary>
            <param name="source">The configuration source.</param>
            <param name="provider">The provider to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="provider" /> is null.</exception>
            <returns>The configuration source to form a fluent interface.</returns>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingProvider``1(PetaPoco.IDatabaseBuildConfiguration,``0,System.Action{``0})">
            <summary>
                Specifies the provider to be used. - see <see cref="P:PetaPoco.IDatabase.Provider" />.
            </summary>
            <param name="source">The configuration source.</param>
            <param name="configure">The configure provider callback.</param>
            <param name="provider">The provider to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="provider" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="configure" /> is null.</exception>
            <returns>The configuration source to form a fluent interface.</returns>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingProvider``1(PetaPoco.IDatabaseBuildConfiguration)">
            <summary>
                Specifies the provider to be used. - see <see cref="P:PetaPoco.IDatabase.Provider" />.
            </summary>
            <param name="source">The configuration source.</param>
            <typeparam name="T">The provider type.</typeparam>
            <returns>The configuration source to form a fluent interface.</returns>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingProvider``1(PetaPoco.IDatabaseBuildConfiguration,System.Action{``0})">
            <summary>
                Specifies the provider to be used. - see <see cref="P:PetaPoco.IDatabase.Provider" />.
            </summary>
            <param name="source">The configuration source.</param>
            <param name="configure">The configure provider callback.</param>
            <typeparam name="T">The provider type.</typeparam>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="configure" /> is null.</exception>
            <returns>The configuration source to form a fluent interface.</returns>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.WithAutoSelect(PetaPoco.IDatabaseBuildConfiguration)">
            <summary>
                Enables auto select - see <see cref="P:PetaPoco.IDatabase.EnableAutoSelect" />.
            </summary>
            <param name="source">The configuration source.</param>
            <returns>The configuration source to form a fluent interface.</returns>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.WithoutAutoSelect(PetaPoco.IDatabaseBuildConfiguration)">
            <summary>
                Disables auto select - see <see cref="P:PetaPoco.IDatabase.EnableAutoSelect" />.
            </summary>
            <param name="source">The configuration source.</param>
            <returns>The configuration source to form a fluent interface.</returns>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingConnectionString(PetaPoco.IDatabaseBuildConfiguration,System.String)">
            <summary>
                Adds a connection string - see <see cref="P:PetaPoco.IDatabase.ConnectionString" />.
            </summary>
            <param name="source">The configuration source.</param>
            <param name="connectionString">The connection string.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="connectionString" /> is null or empty.</exception>
            <returns>The configuration source to form a fluent interface.</returns>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingConnectionStringName(PetaPoco.IDatabaseBuildConfiguration,System.String)">
            <summary>
                Adds a connection string name.
            </summary>
            <param name="source">The configuration source.</param>
            <param name="connectionStringName">The connection string name.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="connectionStringName" /> is null or empty.</exception>
            <returns>The configuration source to form a fluent interface.</returns>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingDefaultMapper``1(PetaPoco.IDatabaseBuildConfiguration,``0)">
            <summary>
                Specifies the default mapper to use when no specific mapper has been registered.
            </summary>
            <param name="source">The configuration source.</param>
            <param name="mapper">The mapper to use as the default.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="mapper" /> is null.</exception>
            <returns>The configuration source to form a fluent interface.</returns>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingDefaultMapper``1(PetaPoco.IDatabaseBuildConfiguration,``0,System.Action{``0})">
            <summary>
                Specifies the default mapper to use when no specific mapper has been registered.
            </summary>
            <param name="source">The configuration source.</param>
            <param name="mapper">The mapper to use as the default.</param>
            <param name="configure">The configure mapper callback.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="mapper" /> is null.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="configure" /> is null.</exception>
            <returns>The configuration source to form a fluent interface.</returns>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingDefaultMapper``1(PetaPoco.IDatabaseBuildConfiguration)">
            <summary>
                Specifies the default mapper to use when no specific mapper has been registered.
            </summary>
            <param name="source">The configuration source.</param>
            <typeparam name="T">The mapper type.</typeparam>
            <returns>The configuration source to form a fluent interface.</returns>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingDefaultMapper``1(PetaPoco.IDatabaseBuildConfiguration,System.Action{``0})">
            <summary>
                Specifies the default mapper to use when no specific mapper has been registered.
            </summary>
            <param name="source">The configuration source.</param>
            <param name="configure">The configure mapper callback.</param>
            <typeparam name="T">The mapper type.</typeparam>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="configure" /> is null.</exception>
            <returns>The configuration source to form a fluent interface.</returns>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.UsingIsolationLevel(PetaPoco.IDatabaseBuildConfiguration,System.Data.IsolationLevel)">
            <summary>
                Specifies the transaction isolation level to use.
            </summary>
            <param name="source">The configuration source.</param>
            <param name="isolationLevel"></param>
            <returns>The configuration source to form a fluent interface.</returns>
        </member>
        <member name="M:PetaPoco.DatabaseConfigurationExtensions.Create(PetaPoco.IDatabaseBuildConfiguration)">
            <summary>
                Creates an instance of PetaPooc using the specified <paramref name="source" />.
            </summary>
            <param name="source">The configuration source used to create and configure an instance of PetaPoco.</param>
            <returns>An instance of PetaPoco.</returns>
        </member>
        <member name="T:PetaPoco.IBuildConfigurationSettings">
            <summary>
                Represents the build configuration settings contract.
            </summary>
        </member>
        <member name="M:PetaPoco.IBuildConfigurationSettings.SetSetting(System.String,System.Object)">
            <summary>
                Sets the setting against the specified key.
            </summary>
            <param name="key">The setting's key.</param>
            <param name="value">The setting's value.</param>
        </member>
        <member name="M:PetaPoco.IBuildConfigurationSettings.TryGetSetting``1(System.String,System.Action{``0},System.Action)">
            <summary>
                Tries to get the setting and calls the <paramref name="setSetting" /> to set the value if found.
            </summary>
            <typeparam name="T">The setting type.</typeparam>
            <param name="key">The setting's key.</param>
            <param name="setSetting">The set setting callback.</param>
            <param name="onFail">The on fail callback, called when no setting can be set.</param>
        </member>
        <member name="T:PetaPoco.IDatabaseBuildConfiguration">
            <summary>
                A helper interface which enables fluent configuration extension methods.
            </summary>
        </member>
        <member name="T:PetaPoco.IHideObjectMethods">
            <summary>
                An interface used to hide the 4 System.Object instance methods from the API in Visual Studio intellisense.
            </summary>
            <remarks>
                Reference Project: MircoLite ORM (https://github.com/TrevorPilley/MicroLite)
                Author: Trevor Pilley
                Source: https://github.com/TrevorPilley/MicroLite/blob/develop/MicroLite/IHideObjectMethods.cs
            </remarks>
        </member>
        <member name="M:PetaPoco.IHideObjectMethods.Equals(System.Object)">
            <summary>
                Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
                <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PetaPoco.IHideObjectMethods.GetHashCode">
            <summary>
                Returns a hash code for this instance.
            </summary>
            <returns>
                A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:PetaPoco.IHideObjectMethods.GetType">
            <summary>
                Gets the type.
            </summary>
            <returns>The type of the object.</returns>
        </member>
        <member name="M:PetaPoco.IHideObjectMethods.ToString">
            <summary>
                Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
                A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:PetaPoco.ITransactionAccessor">
            <summary>
                Represents a contract which exposes the current <see cref="T:System.Data.IDbTransaction" /> instance.
            </summary>
        </member>
        <member name="P:PetaPoco.ITransactionAccessor.Transaction">
            <summary>
                Gets the current transaction instance.
            </summary>
            <returns>
                The current transaction instance; else, <c>null</c> if not transaction is in progress.
            </returns>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Insert(System.String,System.Object)">
            <summary>
                Performs an SQL Insert.
            </summary>
            <param name="tableName">The name of the table to insert into.</param>
            <param name="poco">The POCO object that specifies the column values to be inserted.</param>
            <returns>The auto allocated primary key of the new record, or null for non-auto-increment tables.</returns>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Insert(System.String,System.String,System.Object)">
            <summary>
                Performs an SQL Insert.
            </summary>
            <param name="tableName">The name of the table to insert into.</param>
            <param name="primaryKeyName">The name of the primary key column of the table.</param>
            <param name="poco">The POCO object that specifies the column values to be inserted.</param>
            <returns>The auto allocated primary key of the new record, or null for non-auto-increment tables.</returns>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Insert(System.String,System.String,System.Boolean,System.Object)">
            <summary>
                Performs an SQL Insert.
            </summary>
            <param name="tableName">The name of the table to insert into.</param>
            <param name="primaryKeyName">The name of the primary key column of the table.</param>
            <param name="autoIncrement">True if the primary key is automatically allocated by the DB.</param>
            <param name="poco">The POCO object that specifies the column values to be inserted.</param>
            <returns>The auto allocated primary key of the new record, or null for non-auto-increment tables.</returns>
            <remarks>
                Inserts a poco into a table. If the poco has a property with the same name
                as the primary key, the id of the new record is assigned to it. Either way,
                the new id is returned.
            </remarks>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Insert(System.Object)">
            <summary>
                Performs an SQL Insert.
            </summary>
            <param name="poco">The POCO object that specifies the column values to be inserted.</param>
            <returns>The auto allocated primary key of the new record, or null for non-auto-increment tables.</returns>
            <remarks>
                The name of the table, it's primary key and whether it's an auto-allocated primary key are retrieved
                from the POCO's attributes
            </remarks>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Update(System.String,System.String,System.Object,System.Object)">
            <summary>
                Performs an SQL update
            </summary>
            <param name="tableName">The name of the table to update</param>
            <param name="primaryKeyName">The name of the primary key column of the table</param>
            <param name="poco">The POCO object that specifies the column values to be updated</param>
            <param name="primaryKeyValue">The primary key of the record to be updated</param>
            <returns>The number of affected records</returns>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Update(System.String,System.String,System.Object,System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Performs an SQL update
            </summary>
            <param name="tableName">The name of the table to update</param>
            <param name="primaryKeyName">The name of the primary key column of the table</param>
            <param name="poco">The POCO object that specifies the column values to be updated</param>
            <param name="primaryKeyValue">The primary key of the record to be updated</param>
            <param name="columns">The column names of the columns to be updated, or null for all</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Update(System.String,System.String,System.Object)">
            <summary>
                Performs an SQL update
            </summary>
            <param name="tableName">The name of the table to update</param>
            <param name="primaryKeyName">The name of the primary key column of the table</param>
            <param name="poco">The POCO object that specifies the column values to be updated</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Update(System.String,System.String,System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Performs an SQL update
            </summary>
            <param name="tableName">The name of the table to update</param>
            <param name="primaryKeyName">The name of the primary key column of the table</param>
            <param name="poco">The POCO object that specifies the column values to be updated</param>
            <param name="columns">The column names of the columns to be updated, or null for all</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Update(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Performs an SQL update
            </summary>
            <param name="poco">The POCO object that specifies the column values to be updated</param>
            <param name="columns">The column names of the columns to be updated, or null for all</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Update(System.Object)">
            <summary>
                Performs an SQL update
            </summary>
            <param name="poco">The POCO object that specifies the column values to be updated</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Update(System.Object,System.Object)">
            <summary>
                Performs an SQL update
            </summary>
            <param name="poco">The POCO object that specifies the column values to be updated</param>
            <param name="primaryKeyValue">The primary key of the record to be updated</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Update(System.Object,System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Performs an SQL update
            </summary>
            <param name="poco">The POCO object that specifies the column values to be updated</param>
            <param name="primaryKeyValue">The primary key of the record to be updated</param>
            <param name="columns">The column names of the columns to be updated, or null for all</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Update``1(System.String,System.Object[])">
            <summary>
                Performs an SQL update
            </summary>
            <typeparam name="T">The POCO class who's attributes specify the name of the table to update</typeparam>
            <param name="sql">The SQL update and condition clause (ie: everything after "UPDATE tablename"</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Update``1(PetaPoco.Sql)">
            <summary>
                Performs an SQL update
            </summary>
            <typeparam name="T">The POCO class who's attributes specify the name of the table to update</typeparam>
            <param name="sql">
                An SQL builder object representing the SQL update and condition clause (ie: everything after "UPDATE
                tablename"
            </param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Delete(System.String,System.String,System.Object)">
            <summary>
                Performs and SQL Delete
            </summary>
            <param name="tableName">The name of the table to delete from</param>
            <param name="primaryKeyName">The name of the primary key column</param>
            <param name="poco">The POCO object whose primary key value will be used to delete the row</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Delete(System.String,System.String,System.Object,System.Object)">
            <summary>
                Performs and SQL Delete
            </summary>
            <param name="tableName">The name of the table to delete from</param>
            <param name="primaryKeyName">The name of the primary key column</param>
            <param name="poco">
                The POCO object whose primary key value will be used to delete the row (or null to use the supplied
                primary key value)
            </param>
            <param name="primaryKeyValue">
                The value of the primary key identifing the record to be deleted (or null, or get this
                value from the POCO instance)
            </param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Delete(System.Object)">
            <summary>
                Performs an SQL Delete
            </summary>
            <param name="poco">The POCO object specifying the table name and primary key value of the row to be deleted</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Delete``1(System.Object)">
            <summary>
                Performs an SQL Delete
            </summary>
            <typeparam name="T">The POCO class whose attributes identify the table and primary key to be used in the delete</typeparam>
            <param name="pocoOrPrimaryKey">The value of the primary key of the row to delete</param>
            <returns></returns>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Delete``1(System.String,System.Object[])">
            <summary>
                Performs an SQL Delete
            </summary>
            <typeparam name="T">The POCO class who's attributes specify the name of the table to delete from</typeparam>
            <param name="sql">The SQL condition clause identifying the row to delete (ie: everything after "DELETE FROM tablename"</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Delete``1(PetaPoco.Sql)">
            <summary>
                Performs an SQL Delete
            </summary>
            <typeparam name="T">The POCO class who's attributes specify the name of the table to delete from</typeparam>
            <param name="sql">
                An SQL builder object representing the SQL condition clause identifying the row to delete (ie:
                everything after "UPDATE tablename"
            </param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.IAlterPoco.IsNew(System.String,System.Object)">
            <summary>
                Check if a poco represents a new row
            </summary>
            <param name="primaryKeyName">The name of the primary key column</param>
            <param name="poco">The object instance whose "newness" is to be tested</param>
            <returns>True if the POCO represents a record already in the database</returns>
            <remarks>This method simply tests if the POCO's primary key column property has been set to something non-zero.</remarks>
        </member>
        <member name="M:PetaPoco.IAlterPoco.IsNew(System.Object)">
            <summary>
                Check if a poco represents a new row
            </summary>
            <param name="poco">The object instance whose "newness" is to be tested</param>
            <returns>True if the POCO represents a record already in the database</returns>
            <remarks>This method simply tests if the POCO's primary key column property has been set to something non-zero.</remarks>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Save(System.String,System.String,System.Object)">
            <summary>
                Saves a POCO by either performing either an SQL Insert or SQL Update
            </summary>
            <param name="tableName">The name of the table to be updated</param>
            <param name="primaryKeyName">The name of the primary key column</param>
            <param name="poco">The POCO object to be saved</param>
        </member>
        <member name="M:PetaPoco.IAlterPoco.Save(System.Object)">
            <summary>
                Saves a POCO by either performing either an SQL Insert or SQL Update
            </summary>
            <param name="poco">The POCO object to be saved</param>
        </member>
        <member name="T:PetaPoco.IDatabase">
            <summary>
                Specifies the database contract.
            </summary>
        </member>
        <member name="P:PetaPoco.IDatabase.DefaultMapper">
            <summary>
                Gets the default mapper. (Default is <see cref="T:PetaPoco.ConventionMapper" />)
            </summary>
            <returns>
                The default mapper.
            </returns>
        </member>
        <member name="P:PetaPoco.IDatabase.LastSQL">
            <summary>
                Gets the SQL of the last executed statement
            </summary>
            <returns>
                The last executed SQL.
            </returns>
        </member>
        <member name="P:PetaPoco.IDatabase.LastArgs">
            <summary>
                Gets the arguments to the last execute statement
            </summary>
            <returns>
                The last executed SQL arguments.
            </returns>
        </member>
        <member name="P:PetaPoco.IDatabase.LastCommand">
            <summary>
                Gets a formatted string describing the last executed SQL statement and it's argument values
            </summary>
            <returns>
                The formatted string.
            </returns>
        </member>
        <member name="P:PetaPoco.IDatabase.EnableAutoSelect">
            <summary>
                Gets or sets the enable auto select. (Default is True)
            </summary>
            <remarks>
                When set to true, PetaPoco will automatically create the "SELECT columns" section of the query for any query which
                is found to require them.
            </remarks>
            <returns>
                True, if auto select is enabled; Else, false.
            </returns>
        </member>
        <member name="P:PetaPoco.IDatabase.EnableNamedParams">
            <summary>
                Gets the flag for whether named params are enabled. (Default is True)
            </summary>
            <remarks>
                When set to true, parameters can be named ?myparam and populated from properties of the passed in argument values.
            </remarks>
            <returns>
                True, if named parameters are enabled; Else, false.
            </returns>
        </member>
        <member name="P:PetaPoco.IDatabase.CommandTimeout">
            <summary>
                Sets the timeout value, in seconds, which PetaPoco applies to all <see cref="P:System.Data.IDbCommand.CommandTimeout" />.
                (Default is 0)
            </summary>
            <remarks>
                If the current value is zero PetaPoco will not set the command timeout, and therefor, the .net default (30 seconds)
                will be in affect.
            </remarks>
            <returns>
                The current command timeout.
            </returns>
        </member>
        <member name="P:PetaPoco.IDatabase.OneTimeCommandTimeout">
            <summary>
                Sets the timeout value for the next (and only next) SQL statement.
            </summary>
            <remarks>
                This is a one-time settings, which after use, will return the <see cref="P:PetaPoco.IDatabase.CommandTimeout" /> setting.
            </remarks>
            <returns>
                The one time command timeout.
            </returns>
        </member>
        <member name="P:PetaPoco.IDatabase.Provider">
            <summary>
                Gets the current <seealso cref="P:PetaPoco.IDatabase.Provider" />.
            </summary>
            <returns>
                The current database provider.
            </returns>
        </member>
        <member name="P:PetaPoco.IDatabase.ConnectionString">
            <summary>
                Gets the connection string.
            </summary>
            <returns>
                The connection string.
            </returns>
        </member>
        <member name="P:PetaPoco.IDatabase.IsolationLevel">
            <summary>
                Gets or sets the transaction isolation level.
            </summary>
            <remarks>
                When value is null, the underlying providers default isolation level is used.
            </remarks>
        </member>
        <member name="M:PetaPoco.IDatabase.GetTransaction">
            <summary>
                Starts or continues a transaction.
            </summary>
            <returns>An ITransaction reference that must be Completed or disposed</returns>
            <remarks>
                This method makes management of calls to Begin/End/CompleteTransaction easier.
                The usage pattern for this should be:
                using (var tx = db.GetTransaction())
                {
                // Do stuff
                db.Update(...);
                // Mark the transaction as complete
                tx.Complete();
                }
                Transactions can be nested but they must all be completed otherwise the entire
                transaction is aborted.
            </remarks>
        </member>
        <member name="M:PetaPoco.IDatabase.BeginTransaction">
            <summary>
                Starts a transaction scope, see GetTransaction() for recommended usage
            </summary>
        </member>
        <member name="M:PetaPoco.IDatabase.AbortTransaction">
            <summary>
                Aborts the entire outer most transaction scope
            </summary>
            <remarks>
                Called automatically by Transaction.Dispose()
                if the transaction wasn't completed.
            </remarks>
        </member>
        <member name="M:PetaPoco.IDatabase.CompleteTransaction">
            <summary>
                Marks the current transaction scope as complete.
            </summary>
        </member>
        <member name="M:PetaPoco.IExecute.Execute(System.String,System.Object[])">
            <summary>
                Executes a non-query command
            </summary>
            <param name="sql">The SQL statement to execute</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:PetaPoco.IExecute.Execute(PetaPoco.Sql)">
            <summary>
                Executes a non-query command
            </summary>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:PetaPoco.IExecute.ExecuteScalar``1(System.String,System.Object[])">
            <summary>
                Executes a query and return the first column of the first row in the result set.
            </summary>
            <typeparam name="T">The type that the result value should be cast to</typeparam>
            <param name="sql">The SQL query to execute</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>The scalar value cast to T</returns>
        </member>
        <member name="M:PetaPoco.IExecute.ExecuteScalar``1(PetaPoco.Sql)">
            <summary>
                Executes a query and return the first column of the first row in the result set.
            </summary>
            <typeparam name="T">The type that the result value should be cast to</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>The scalar value cast to T</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Query``1(System.String,System.Object[])">
            <summary>
                Runs an SQL query, returning the results as an IEnumerable collection
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">The SQL query</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>An enumerable collection of result records</returns>
            <remarks>
                For some DB providers, care should be taken to not start a new Query before finishing with
                and disposing the previous one. In cases where this is an issue, consider using Fetch which
                returns the results as a List rather than an IEnumerable.
            </remarks>
        </member>
        <member name="M:PetaPoco.IQuery.Query``1(PetaPoco.Sql)">
            <summary>
                Runs an SQL query, returning the results as an IEnumerable collection
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">An SQL builder object representing the base SQL query and it's arguments</param>
            <returns>An enumerable collection of result records</returns>
            <remarks>
                For some DB providers, care should be taken to not start a new Query before finishing with
                and disposing the previous one. In cases where this is an issue, consider using Fetch which
                returns the results as a List rather than an IEnumerable.
            </remarks>
        </member>
        <member name="M:PetaPoco.IQuery.Query``3(System.Func{``0,``1,``2},System.String,System.Object[])">
            <summary>
                Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Query``4(System.Func{``0,``1,``2,``3},System.String,System.Object[])">
            <summary>
                Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Query``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Object[])">
            <summary>
                Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Query``6(System.Func{``0,``1,``2,``3,``4,``5},System.String,System.Object[])">
            <summary>
                Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <typeparam name="T5">The fifth POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Query``3(System.Func{``0,``1,``2},PetaPoco.Sql)">
            <summary>
                Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Query``4(System.Func{``0,``1,``2,``3},PetaPoco.Sql)">
            <summary>
                Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Query``5(System.Func{``0,``1,``2,``3,``4},PetaPoco.Sql)">
            <summary>
                Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Query``6(System.Func{``0,``1,``2,``3,``4,``5},PetaPoco.Sql)">
            <summary>
                Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <typeparam name="T5">The fifth POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Query``2(System.String,System.Object[])">
            <summary>
                Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Query``3(System.String,System.Object[])">
            <summary>
                Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Query``4(System.String,System.Object[])">
            <summary>
                Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Query``5(System.String,System.Object[])">
            <summary>
                Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <typeparam name="T5">The fifth POCO type</typeparam>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Query``2(PetaPoco.Sql)">
            <summary>
                Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Query``3(PetaPoco.Sql)">
            <summary>
                Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Query``4(PetaPoco.Sql)">
            <summary>
                Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Query``5(PetaPoco.Sql)">
            <summary>
                Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <typeparam name="T5">The fifth POCO type</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Query``1(System.Type[],System.Object,System.String,System.Object[])">
            <summary>
                Performs a multi-poco query
            </summary>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="types">An array of Types representing the POCO types of the returned result set.</param>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``1(System.String,System.Object[])">
            <summary>
                Runs a query and returns the result set as a typed list
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">The SQL query to execute</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A List holding the results of the query</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``1(PetaPoco.Sql)">
            <summary>
                Runs a query and returns the result set as a typed list
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A List holding the results of the query</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Page``1(System.Int64,System.Int64,System.String,System.Object[],System.String,System.Object[])">
            <summary>
                Retrieves a page of records	and the total number of available records
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="page">The 1 based page number to retrieve</param>
            <param name="itemsPerPage">The number of records per page</param>
            <param name="sqlCount">The SQL to retrieve the total number of records</param>
            <param name="countArgs">Arguments to any embedded parameters in the sqlCount statement</param>
            <param name="sqlPage">The SQL To retrieve a single page of results</param>
            <param name="pageArgs">Arguments to any embedded parameters in the sqlPage statement</param>
            <returns>A Page of results</returns>
            <remarks>
                This method allows separate SQL statements to be explicitly provided for the two parts of the page query.
                The page and itemsPerPage parameters are not used directly and are used simply to populate the returned Page
                object.
            </remarks>
        </member>
        <member name="M:PetaPoco.IQuery.Page``1(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
                Retrieves a page of records	and the total number of available records
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="page">The 1 based page number to retrieve</param>
            <param name="itemsPerPage">The number of records per page</param>
            <param name="sql">The base SQL query</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>A Page of results</returns>
            <remarks>
                PetaPoco will automatically modify the supplied SELECT statement to only retrieve the
                records for the specified page.  It will also execute a second query to retrieve the
                total number of records in the result set.
            </remarks>
        </member>
        <member name="M:PetaPoco.IQuery.Page``1(System.Int64,System.Int64,PetaPoco.Sql)">
            <summary>
                Retrieves a page of records	and the total number of available records
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="page">The 1 based page number to retrieve</param>
            <param name="itemsPerPage">The number of records per page</param>
            <param name="sql">An SQL builder object representing the base SQL query and it's arguments</param>
            <returns>A Page of results</returns>
            <remarks>
                PetaPoco will automatically modify the supplied SELECT statement to only retrieve the
                records for the specified page.  It will also execute a second query to retrieve the
                total number of records in the result set.
            </remarks>
        </member>
        <member name="M:PetaPoco.IQuery.Page``1(System.Int64,System.Int64,PetaPoco.Sql,PetaPoco.Sql)">
            <summary>
                Retrieves a page of records	and the total number of available records
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="page">The 1 based page number to retrieve</param>
            <param name="itemsPerPage">The number of records per page</param>
            <param name="sqlCount">An SQL builder object representing the SQL to retrieve the total number of records</param>
            <param name="sqlPage">An SQL builder object representing the SQL to retrieve a single page of results</param>
            <returns>A Page of results</returns>
            <remarks>
                This method allows separate SQL statements to be explicitly provided for the two parts of the page query.
                The page and itemsPerPage parameters are not used directly and are used simply to populate the returned Page
                object.
            </remarks>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``1(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
                Retrieves a page of records (without the total count)
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="page">The 1 based page number to retrieve</param>
            <param name="itemsPerPage">The number of records per page</param>
            <param name="sql">The base SQL query</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>A List of results</returns>
            <remarks>
                PetaPoco will automatically modify the supplied SELECT statement to only retrieve the
                records for the specified page.
            </remarks>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``1(System.Int64,System.Int64,PetaPoco.Sql)">
            <summary>
                Retrieves a page of records (without the total count)
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="page">The 1 based page number to retrieve</param>
            <param name="itemsPerPage">The number of records per page</param>
            <param name="sql">An SQL builder object representing the base SQL query and it's arguments</param>
            <returns>A List of results</returns>
            <remarks>
                PetaPoco will automatically modify the supplied SELECT statement to only retrieve the
                records for the specified page.
            </remarks>
        </member>
        <member name="M:PetaPoco.IQuery.SkipTake``1(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
                Retrieves a range of records from result set
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="skip">The number of rows at the start of the result set to skip over</param>
            <param name="take">The number of rows to retrieve</param>
            <param name="sql">The base SQL query</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>A List of results</returns>
            <remarks>
                PetaPoco will automatically modify the supplied SELECT statement to only retrieve the
                records for the specified range.
            </remarks>
        </member>
        <member name="M:PetaPoco.IQuery.SkipTake``1(System.Int64,System.Int64,PetaPoco.Sql)">
            <summary>
                Retrieves a range of records from result set
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="skip">The number of rows at the start of the result set to skip over</param>
            <param name="take">The number of rows to retrieve</param>
            <param name="sql">An SQL builder object representing the base SQL query and it's arguments</param>
            <returns>A List of results</returns>
            <remarks>
                PetaPoco will automatically modify the supplied SELECT statement to only retrieve the
                records for the specified range.
            </remarks>
        </member>
        <member name="M:PetaPoco.IQuery.Exists``1(System.Object)">
            <summary>
                Checks for the existence of a row with the specified primary key value.
            </summary>
            <typeparam name="T">The Type representing the table being queried</typeparam>
            <param name="primaryKey">The primary key value to look for</param>
            <returns>True if a record with the specified primary key value exists.</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Exists``1(System.String,System.Object[])">
            <summary>
                Checks for the existence of a row matching the specified condition
            </summary>
            <typeparam name="T">The Type representing the table being queried</typeparam>
            <param name="sqlCondition">The SQL expression to be tested for (ie: the WHERE expression)</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>True if a record matching the condition is found.</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Single``1(System.Object)">
            <summary>
                Returns the record with the specified primary key value
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="primaryKey">The primary key value of the record to fetch</param>
            <returns>The single record matching the specified primary key value</returns>
            <remarks>
                Throws an exception if there are zero or more than one record with the specified primary key value.
            </remarks>
        </member>
        <member name="M:PetaPoco.IQuery.Single``1(System.String,System.Object[])">
            <summary>
                Runs a query that should always return a single row.
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">The SQL query</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>The single record matching the specified primary key value</returns>
            <remarks>
                Throws an exception if there are zero or more than one matching record
            </remarks>
        </member>
        <member name="M:PetaPoco.IQuery.Single``1(PetaPoco.Sql)">
            <summary>
                Runs a query that should always return a single row.
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>The single record matching the specified primary key value</returns>
            <remarks>
                Throws an exception if there are zero or more than one matching record
            </remarks>
        </member>
        <member name="M:PetaPoco.IQuery.SingleOrDefault``1(PetaPoco.Sql)">
            <summary>
                Runs a query that should always return either a single row, or no rows
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>The single record matching the specified primary key value, or default(T) if no matching rows</returns>
        </member>
        <member name="M:PetaPoco.IQuery.SingleOrDefault``1(System.Object)">
            <summary>
                Returns the record with the specified primary key value, or the default value if not found
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="primaryKey">The primary key value of the record to fetch</param>
            <returns>The single record matching the specified primary key value</returns>
            <remarks>
                If there are no records with the specified primary key value, default(T) (typically null) is returned.
            </remarks>
        </member>
        <member name="M:PetaPoco.IQuery.SingleOrDefault``1(System.String,System.Object[])">
            <summary>
                Runs a query that should always return either a single row, or no rows
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">The SQL query</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>The single record matching the specified primary key value, or default(T) if no matching rows</returns>
        </member>
        <member name="M:PetaPoco.IQuery.First``1(System.String,System.Object[])">
            <summary>
                Runs a query that should always return at least one return
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">The SQL query</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>The first record in the result set</returns>
        </member>
        <member name="M:PetaPoco.IQuery.First``1(PetaPoco.Sql)">
            <summary>
                Runs a query that should always return at least one return
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>The first record in the result set</returns>
        </member>
        <member name="M:PetaPoco.IQuery.FirstOrDefault``1(System.String,System.Object[])">
            <summary>
                Runs a query and returns the first record, or the default value if no matching records
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">The SQL query</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>The first record in the result set, or default(T) if no matching rows</returns>
        </member>
        <member name="M:PetaPoco.IQuery.FirstOrDefault``1(PetaPoco.Sql)">
            <summary>
                Runs a query and returns the first record, or the default value if no matching records
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>The first record in the result set, or default(T) if no matching rows</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``3(System.Func{``0,``1,``2},System.String,System.Object[])">
            <summary>
                Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="TRet">The returned list POCO type</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``4(System.Func{``0,``1,``2,``3},System.String,System.Object[])">
            <summary>
                Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="TRet">The returned list POCO type</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Object[])">
            <summary>
                Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <typeparam name="TRet">The returned list POCO type</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``6(System.Func{``0,``1,``2,``3,``4,``5},System.String,System.Object[])">
            <summary>
                Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <typeparam name="T5">The fifth POCO type</typeparam>
            <typeparam name="TRet">The returned list POCO type</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``3(System.Func{``0,``1,``2},PetaPoco.Sql)">
            <summary>
                Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="TRet">The returned list POCO type</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``4(System.Func{``0,``1,``2,``3},PetaPoco.Sql)">
            <summary>
                Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="TRet">The returned list POCO type</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``5(System.Func{``0,``1,``2,``3,``4},PetaPoco.Sql)">
            <summary>
                Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <typeparam name="TRet">The returned list POCO type</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``6(System.Func{``0,``1,``2,``3,``4,``5},PetaPoco.Sql)">
            <summary>
                Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <typeparam name="T5">The fifth POCO type</typeparam>
            <typeparam name="TRet">The returned list POCO type</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``2(System.String,System.Object[])">
            <summary>
                Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``3(System.String,System.Object[])">
            <summary>
                Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``4(System.String,System.Object[])">
            <summary>
                Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``5(System.String,System.Object[])">
            <summary>
                Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <typeparam name="T5">The fifth POCO type</typeparam>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``2(PetaPoco.Sql)">
            <summary>
                Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``3(PetaPoco.Sql)">
            <summary>
                Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``4(PetaPoco.Sql)">
            <summary>
                Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.IQuery.Fetch``5(PetaPoco.Sql)">
            <summary>
                Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <typeparam name="T5">The fourth POCO type</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.IQuery.QueryMultiple(PetaPoco.Sql)">
            <summary> 
            Perform a multi-results set query 
            </summary> 
            <param name="sql">An SQL builder object representing the query and it's arguments</param> 
            <returns>A GridReader to be queried</returns> 
        </member>
        <member name="M:PetaPoco.IQuery.QueryMultiple(System.String,System.Object[])">
            <summary> 
            Perform a multi-results set query 
            </summary> 
            <param name="sql">The SQL query to be executed</param> 
            <param name="args">Arguments to any embedded parameters in the SQL</param> 
            <returns>A GridReader to be queried</returns>
        </member>
        <member name="T:PetaPoco.Utilities.IPagingHelper">
            <summary>
                Represents the contract for a paging helper.
            </summary>
        </member>
        <member name="M:PetaPoco.Utilities.IPagingHelper.SplitSQL(System.String,PetaPoco.Utilities.SQLParts@)">
            <summary>
                Splits the given <paramref name="sql" /> into <paramref name="parts" />;
            </summary>
            <param name="sql">The SQL to split.</param>
            <param name="parts">The SQL parts.</param>
            <returns><c>True</c> if the SQL could be split; else, <c>False</c>.</returns>
        </member>
        <member name="M:PetaPoco.Utilities.PagingHelper.SplitSQL(System.String,PetaPoco.Utilities.SQLParts@)">
            <summary>
                Splits the given <paramref name="sql" /> into <paramref name="parts" />;
            </summary>
            <param name="sql">The SQL to split.</param>
            <param name="parts">The SQL parts.</param>
            <returns><c>True</c> if the SQL could be split; else, <c>False</c>.</returns>
        </member>
        <member name="T:PetaPoco.Utilities.SQLParts">
            <summary>
                Presents the SQL parts.
            </summary>
        </member>
        <member name="F:PetaPoco.Utilities.SQLParts.Sql">
            <summary>
                The SQL.
            </summary>
        </member>
        <member name="F:PetaPoco.Utilities.SQLParts.SqlCount">
            <summary>
                The SQL count.
            </summary>
        </member>
        <member name="F:PetaPoco.Utilities.SQLParts.SqlSelectRemoved">
            <summary>
                The SQL Select
            </summary>
        </member>
        <member name="F:PetaPoco.Utilities.SQLParts.SqlOrderBy">
            <summary>
                The SQL Order By
            </summary>
        </member>
        <member name="T:PetaPoco.IMapper">
            <summary>
                IMapper provides a way to hook into PetaPoco's Database to POCO mapping mechanism to either
                customize or completely replace it.
            </summary>
            <remarks>
                To use this functionality, instantiate a class that implements IMapper and then pass it to
                PetaPoco through the static method Mappers.Register()
            </remarks>
        </member>
        <member name="M:PetaPoco.IMapper.GetTableInfo(System.Type)">
            <summary>
                Get information about the table associated with a POCO class
            </summary>
            <param name="pocoType">The poco type.</param>
            <returns>A TableInfo instance</returns>
            <remarks>
                This method must return a valid TableInfo.
                To create a TableInfo from a POCO's attributes, use TableInfo.FromPoco
            </remarks>
        </member>
        <member name="M:PetaPoco.IMapper.GetColumnInfo(System.Reflection.PropertyInfo)">
            <summary>
                Get information about the column associated with a property of a POCO
            </summary>
            <param name="pocoProperty">The PropertyInfo of the property being queried</param>
            <returns>A reference to a ColumnInfo instance, or null to ignore this property</returns>
            <remarks>
                To create a ColumnInfo from a property's attributes, use PropertyInfo.FromProperty
            </remarks>
        </member>
        <member name="M:PetaPoco.IMapper.GetFromDbConverter(System.Reflection.PropertyInfo,System.Type)">
            <summary>
                Supply a function to convert a database value to the correct property value
            </summary>
            <param name="targetProperty">The target property</param>
            <param name="sourceType">The type of data returned by the DB</param>
            <returns>A Func that can do the conversion, or null for no conversion</returns>
        </member>
        <member name="M:PetaPoco.IMapper.GetToDbConverter(System.Reflection.PropertyInfo)">
            <summary>
                Supply a function to convert a property value into a database value
            </summary>
            <param name="sourceProperty">The property to be converted</param>
            <returns>A Func that can do the conversion</returns>
            <remarks>
                This conversion is only used for converting values from POCO's that are
                being Inserted or Updated.
                Conversion is not available for parameter values passed directly to queries.
            </remarks>
        </member>
        <member name="T:PetaPoco.Transaction">
            <summary>
                Transaction object helps maintain transaction depth counts
            </summary>
        </member>
        <member name="T:PetaPoco.Sql">
            <summary>
                A simple helper class for build SQL statements
            </summary>
        </member>
        <member name="P:PetaPoco.Sql.Builder">
            <summary>
                Instantiate a new SQL Builder object.  Weirdly implemented as a property but makes
                for more elegantly readable fluent style construction of SQL Statements
                eg: db.Query(Sql.Builder.Append(....))
            </summary>
        </member>
        <member name="P:PetaPoco.Sql.SQL">
            <summary>
                Returns the final SQL statement represented by this builder
            </summary>
        </member>
        <member name="P:PetaPoco.Sql.Arguments">
            <summary>
                Gets the complete, final set of arguments collected by this builder.
            </summary>
        </member>
        <member name="M:PetaPoco.Sql.#ctor">
            <summary>
                Default, empty constructor
            </summary>
        </member>
        <member name="M:PetaPoco.Sql.#ctor(System.String,System.Object[])">
            <summary>
                Construct an SQL statement with the supplied SQL and arguments
            </summary>
            <param name="sql">The SQL statement or fragment</param>
            <param name="args">Arguments to any parameters embedded in the SQL</param>
        </member>
        <member name="M:PetaPoco.Sql.Append(PetaPoco.Sql)">
            <summary>
                Append another SQL builder instance to the right-hand-side of this SQL builder
            </summary>
            <param name="sql">A reference to another SQL builder instance</param>
            <returns>A reference to this builder, allowing for fluent style concatenation</returns>
        </member>
        <member name="M:PetaPoco.Sql.Append(System.String,System.Object[])">
            <summary>
                Append an SQL fragment to the right-hand-side of this SQL builder
            </summary>
            <param name="sql">The SQL statement or fragment</param>
            <param name="args">Arguments to any parameters embedded in the SQL</param>
            <returns>A reference to this builder, allowing for fluent style concatenation</returns>
        </member>
        <member name="M:PetaPoco.Sql.Set(System.String,System.Object[])">
            <summary>
                Appends an SQL SET clause to this SQL builder
            </summary>
            <param name="sql">The SET clause like "{field} = {value}"</param>
            <param name="args">Arguments to any parameters embedded in the supplied SQL</param>
            <returns>A reference to this builder, allowing for fluent style concatenation</returns>
        </member>
        <member name="M:PetaPoco.Sql.Where(System.String,System.Object[])">
            <summary>
                Appends an SQL WHERE clause to this SQL builder
            </summary>
            <param name="sql">The condition of the WHERE clause</param>
            <param name="args">Arguments to any parameters embedded in the supplied SQL</param>
            <returns>A reference to this builder, allowing for fluent style concatenation</returns>
        </member>
        <member name="M:PetaPoco.Sql.OrderBy(System.Object[])">
            <summary>
                Appends an SQL ORDER BY clause to this SQL builder
            </summary>
            <param name="columns">A collection of SQL column names to order by</param>
            <returns>A reference to this builder, allowing for fluent style concatenation</returns>
        </member>
        <member name="M:PetaPoco.Sql.Select(System.Object[])">
            <summary>
                Appends an SQL SELECT clause to this SQL builder
            </summary>
            <param name="columns">A collection of SQL column names to select</param>
            <returns>A reference to this builder, allowing for fluent style concatenation</returns>
        </member>
        <member name="M:PetaPoco.Sql.From(System.Object[])">
            <summary>
                Appends an SQL FROM clause to this SQL builder
            </summary>
            <param name="tables">A collection of table names to be used in the FROM clause</param>
            <returns>A reference to this builder, allowing for fluent style concatenation</returns>
        </member>
        <member name="M:PetaPoco.Sql.GroupBy(System.Object[])">
            <summary>
                Appends an SQL GROUP BY clause to this SQL builder
            </summary>
            <param name="columns">A collection of column names to be grouped by</param>
            <returns>A reference to this builder, allowing for fluent style concatenation</returns>
        </member>
        <member name="M:PetaPoco.Sql.InnerJoin(System.String)">
            <summary>
                Appends an SQL INNER JOIN clause to this SQL builder
            </summary>
            <param name="table">The name of the table to join</param>
            <returns>A reference an SqlJoinClause through which the join condition can be specified</returns>
        </member>
        <member name="M:PetaPoco.Sql.LeftJoin(System.String)">
            <summary>
                Appends an SQL LEFT JOIN clause to this SQL builder
            </summary>
            <param name="table">The name of the table to join</param>
            <returns>A reference an SqlJoinClause through which the join condition can be specified</returns>
        </member>
        <member name="M:PetaPoco.Sql.ToString">
            <summary>
                Returns the SQL statement.
            </summary>
            <summary>
                Returns the final SQL statement represented by this builder
            </summary>
        </member>
        <member name="T:PetaPoco.Sql.SqlJoinClause">
            <summary>
                The SqlJoinClause is a simple helper class used in the construction of SQL JOIN statements with the SQL builder
            </summary>
        </member>
        <member name="M:PetaPoco.Sql.SqlJoinClause.On(System.String,System.Object[])">
            <summary>
                Appends a SQL ON clause after a JOIN statement
            </summary>
            <param name="onClause">The ON clause to be appended</param>
            <param name="args">Arguments to any parameters embedded in the supplied SQL</param>
            <returns>A reference to the parent SQL builder, allowing for fluent style concatenation</returns>
        </member>
        <member name="T:PetaPoco.TableInfo">
            <summary>
                Use by IMapper to override table bindings for an object
            </summary>
        </member>
        <member name="P:PetaPoco.TableInfo.TableName">
            <summary>
                The database table name
            </summary>
        </member>
        <member name="P:PetaPoco.TableInfo.PrimaryKey">
            <summary>
                The name of the primary key column of the table
            </summary>
        </member>
        <member name="P:PetaPoco.TableInfo.AutoIncrement">
            <summary>
                True if the primary key column is an auto-incrementing
            </summary>
        </member>
        <member name="P:PetaPoco.TableInfo.SequenceName">
            <summary>
                The name of the sequence used for auto-incrementing Oracle primary key fields
            </summary>
        </member>
        <member name="M:PetaPoco.TableInfo.FromPoco(System.Type)">
            <summary>
                Creates and populates a TableInfo from the attributes of a POCO
            </summary>
            <param name="t">The POCO type</param>
            <returns>A TableInfo instance</returns>
        </member>
        <member name="T:PetaPoco.Page`1">
            <summary>
                Holds the results of a paged request.
            </summary>
            <typeparam name="T">The type of Poco in the returned result set</typeparam>
        </member>
        <member name="P:PetaPoco.Page`1.CurrentPage">
            <summary>
                The current page number contained in this page of result set
            </summary>
        </member>
        <member name="P:PetaPoco.Page`1.TotalPages">
            <summary>
                The total number of pages in the full result set
            </summary>
        </member>
        <member name="P:PetaPoco.Page`1.TotalItems">
            <summary>
                The total number of records in the full result set
            </summary>
        </member>
        <member name="P:PetaPoco.Page`1.ItemsPerPage">
            <summary>
                The number of items per page
            </summary>
        </member>
        <member name="P:PetaPoco.Page`1.Items">
            <summary>
                The actual records on this page
            </summary>
        </member>
        <member name="P:PetaPoco.Page`1.Context">
            <summary>
                User property to hold anything.
            </summary>
        </member>
        <member name="T:PetaPoco.PrimaryKeyAttribute">
            <summary>
                Is an attribute, which when applied to a Poco class, specifies primary key column. Additionally, specifies whether
                the column is auto incrementing and the optional sequence name for Oracle sequence columns.
            </summary>
        </member>
        <member name="P:PetaPoco.PrimaryKeyAttribute.Value">
            <summary>
                The column name.
            </summary>
            <returns>
                The column name.
            </returns>
        </member>
        <member name="P:PetaPoco.PrimaryKeyAttribute.SequenceName">
            <summary>
                The sequence name.
            </summary>
            <returns>
                The sequence name.
            </returns>
        </member>
        <member name="P:PetaPoco.PrimaryKeyAttribute.AutoIncrement">
            <summary>
                A flag which specifies if the primary key is auto incrementing.
            </summary>
            <returns>
                True if the primary key is auto incrementing; else, False.
            </returns>
        </member>
        <member name="M:PetaPoco.PrimaryKeyAttribute.#ctor(System.String)">
            <summary>
                Constructs a new instance of the <seealso cref="T:PetaPoco.PrimaryKeyAttribute" />.
            </summary>
            <param name="primaryKey">The name of the primary key column.</param>
        </member>
        <member name="T:PetaPoco.TableNameAttribute">
            <summary>
                Represents an attribute, which when applied to a Poco class, specifies the the DB table name which it maps to
            </summary>
        </member>
        <member name="P:PetaPoco.TableNameAttribute.Value">
            <summary>
                The table nane of the database that this entity maps to.
            </summary>
            <returns>
                The table nane of the database that this entity maps to.
            </returns>
        </member>
        <member name="M:PetaPoco.TableNameAttribute.#ctor(System.String)">
            <summary>
                Constructs a new instance of the <seealso cref="T:PetaPoco.TableNameAttribute" />.
            </summary>
            <param name="tableName">The table nane of the database that this entity maps to.</param>
        </member>
        <member name="T:PetaPoco.ResultColumnAttribute">
            <summary>
                Represents an attribute which can decorate a poco property as a result only column. A result only column is a
                column that is only populated in queries and is not used for updates or inserts operations.
            </summary>
        </member>
        <member name="M:PetaPoco.ResultColumnAttribute.#ctor">
            <summary>
                Constructs a new instance of the <seealso cref="T:PetaPoco.ResultColumnAttribute" />.
            </summary>
        </member>
        <member name="M:PetaPoco.ResultColumnAttribute.#ctor(System.String)">
            <summary>
                Constructs a new instance of the <seealso cref="T:PetaPoco.ResultColumnAttribute" />.
            </summary>
            <param name="name">The name of the DB column.</param>
        </member>
        <member name="T:PetaPoco.IgnoreAttribute">
            <summary>
                Represents an attribute which can decorate a Poco property to ensure PetaPoco does not map column, and therefore
                ignores the column.
            </summary>
        </member>
        <member name="T:PetaPoco.ExplicitColumnsAttribute">
            <summary>
                Represents the attribute which decorates a poco class to state all columns must be explicitly mapped using either a
                <seealso cref="T:PetaPoco.ColumnAttribute" /> or <seealso cref="T:PetaPoco.ResultColumnAttribute" />.
            </summary>
        </member>
        <member name="T:PetaPoco.Database">
            <summary>
                The main PetaPoco Database class.  You can either use this class directly, or derive from it.
            </summary>
        </member>
        <member name="M:PetaPoco.Database.Dispose">
            <summary>
                Automatically close one open shared connection
            </summary>
        </member>
        <member name="M:PetaPoco.Database.#ctor">
            <summary>
                Constructs an instance using the first connection string found in the app/web configuration file.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when no connection strings can registered.</exception>
        </member>
        <member name="M:PetaPoco.Database.#ctor(System.Data.IDbConnection)">
            <summary>
                Constructs an instance using a supplied IDbConnection.
            </summary>
            <param name="connection">The IDbConnection to use.</param>
            <remarks>
                The supplied IDbConnection will not be closed/disposed by PetaPoco - that remains
                the responsibility of the caller.
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="connection" /> is null or empty.</exception>
        </member>
        <member name="M:PetaPoco.Database.#ctor(System.String,System.String)">
            <summary>
                Constructs an instance using a supplied connections string and optionally a provider name. If no provider name is
                given, the default database provider will be MS SQL Server.
            </summary>
            <param name="connectionString">The database connection string.</param>
            <param name="providerName">The database provider name, if given.</param>
            <remarks>
                PetaPoco will automatically close and dispose any connections it creates.
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="connectionString" /> is null or empty.</exception>
        </member>
        <member name="M:PetaPoco.Database.#ctor(System.String,System.Data.Common.DbProviderFactory)">
            <summary>
                Constructs an instance using the supplied connection string and DbProviderFactory.
            </summary>
            <param name="connectionString">The database connection string.</param>
            <param name="factory">The DbProviderFactory to use for instantiating IDbConnection's.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="connectionString" /> is null or empty.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="factory" /> is null.</exception>
        </member>
        <member name="M:PetaPoco.Database.#ctor(System.String)">
            <summary>
                Constructs an instance using a supplied connection string name. The actual connection string and provider will be
                read from app/web.config.
            </summary>
            <param name="connectionStringName">The name of the connection.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="connectionStringName" /> is null or empty.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when a connection string cannot be found.</exception>
        </member>
        <member name="M:PetaPoco.Database.#ctor(System.String,PetaPoco.Core.IProvider,PetaPoco.IMapper)">
            <summary>
                Constructs an instance using the supplied provider and optional default mapper.
            </summary>
            <param name="connectionString">The database connection string.</param>
            <param name="provider">The provider to use.</param>
            <param name="defaultMapper">The default mapper to use when no specific mapper has been registered.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="connectionString" /> is null or empty.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="provider" /> is null.</exception>
        </member>
        <member name="M:PetaPoco.Database.#ctor(PetaPoco.IDatabaseBuildConfiguration)">
            <summary>
                Constructs an instance using the supplied <paramref name="configuration"/>.
            </summary>
            <param name="configuration">The configuration for constructing an instance.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="configuration" /> is null.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when no configuration string is configured and app/web config does any connection string registered.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when a connection string configured and no provider is configured.</exception>
        </member>
        <member name="M:PetaPoco.Database.Initialise(PetaPoco.Core.IProvider,PetaPoco.IMapper)">
            <summary>
                Provides common initialization for the various constructors.
            </summary>
        </member>
        <member name="P:PetaPoco.Database.KeepConnectionAlive">
            <summary>
                When set to true the first opened connection is kept alive until this object is disposed
            </summary>
        </member>
        <member name="M:PetaPoco.Database.OpenSharedConnection">
            <summary>
                Open a connection that will be used for all subsequent queries.
            </summary>
            <remarks>
                Calls to Open/CloseSharedConnection are reference counted and should be balanced
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.CloseSharedConnection">
            <summary>
                Releases the shared connection
            </summary>
        </member>
        <member name="P:PetaPoco.Database.Connection">
            <summary>
                Provides access to the currently open shared connection (or null if none)
            </summary>
        </member>
        <member name="P:PetaPoco.Database.PetaPoco#ITransactionAccessor#Transaction">
            <summary>
                Gets the current transaction instance.
            </summary>
            <returns>
                The current transaction instance; else, <c>null</c> if not transaction is in progress.
            </returns>
        </member>
        <member name="M:PetaPoco.Database.GetTransaction">
            <summary>
                Starts or continues a transaction.
            </summary>
            <returns>An ITransaction reference that must be Completed or disposed</returns>
            <remarks>
                This method makes management of calls to Begin/End/CompleteTransaction easier.
                The usage pattern for this should be:
                using (var tx = db.GetTransaction())
                {
                // Do stuff
                db.Update(...);
                // Mark the transaction as complete
                tx.Complete();
                }
                Transactions can be nested but they must all be completed otherwise the entire
                transaction is aborted.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.OnBeginTransaction">
            <summary>
                Called when a transaction starts.  Overridden by the T4 template generated database
                classes to ensure the same DB instance is used throughout the transaction.
            </summary>
        </member>
        <member name="M:PetaPoco.Database.OnEndTransaction">
            <summary>
                Called when a transaction ends.
            </summary>
        </member>
        <member name="M:PetaPoco.Database.BeginTransaction">
            <summary>
                Starts a transaction scope, see GetTransaction() for recommended usage
            </summary>
        </member>
        <member name="M:PetaPoco.Database.CleanupTransaction">
            <summary>
                Internal helper to cleanup transaction
            </summary>
        </member>
        <member name="M:PetaPoco.Database.AbortTransaction">
            <summary>
                Aborts the entire outer most transaction scope
            </summary>
            <remarks>
                Called automatically by Transaction.Dispose()
                if the transaction wasn't completed.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.CompleteTransaction">
            <summary>
                Marks the current transaction scope as complete.
            </summary>
        </member>
        <member name="M:PetaPoco.Database.AddParam(System.Data.IDbCommand,System.Object,System.Reflection.PropertyInfo)">
            <summary>
                Add a parameter to a DB command
            </summary>
            <param name="cmd">A reference to the IDbCommand to which the parameter is to be added</param>
            <param name="value">The value to assign to the parameter</param>
            <param name="pi">Optional, a reference to the property info of the POCO property from which the value is coming.</param>
        </member>
        <member name="M:PetaPoco.Database.OnException(System.Exception)">
            <summary>
                Called if an exception occurs during processing of a DB operation.  Override to provide custom logging/handling.
            </summary>
            <param name="x">The exception instance</param>
            <returns>True to re-throw the exception, false to suppress it</returns>
        </member>
        <member name="M:PetaPoco.Database.OnConnectionOpened(System.Data.IDbConnection)">
            <summary>
                Called when DB connection opened
            </summary>
            <param name="conn">The newly opened IDbConnection</param>
            <returns>The same or a replacement IDbConnection</returns>
            <remarks>
                Override this method to provide custom logging of opening connection, or
                to provide a proxy IDbConnection.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.OnConnectionClosing(System.Data.IDbConnection)">
            <summary>
                Called when DB connection closed
            </summary>
            <param name="conn">The soon to be closed IDBConnection</param>
        </member>
        <member name="M:PetaPoco.Database.OnExecutingCommand(System.Data.IDbCommand)">
            <summary>
                Called just before an DB command is executed
            </summary>
            <param name="cmd">The command to be executed</param>
            <remarks>
                Override this method to provide custom logging of commands and/or
                modification of the IDbCommand before it's executed
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.OnExecutedCommand(System.Data.IDbCommand)">
            <summary>
                Called on completion of command execution
            </summary>
            <param name="cmd">The IDbCommand that finished executing</param>
        </member>
        <member name="M:PetaPoco.Database.Execute(System.String,System.Object[])">
            <summary>
                Executes a non-query command
            </summary>
            <param name="sql">The SQL statement to execute</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:PetaPoco.Database.Execute(PetaPoco.Sql)">
            <summary>
                Executes a non-query command
            </summary>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:PetaPoco.Database.ExecuteScalar``1(System.String,System.Object[])">
            <summary>
                Executes a query and return the first column of the first row in the result set.
            </summary>
            <typeparam name="T">The type that the result value should be cast to</typeparam>
            <param name="sql">The SQL query to execute</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>The scalar value cast to T</returns>
        </member>
        <member name="M:PetaPoco.Database.ExecuteScalar``1(PetaPoco.Sql)">
            <summary>
                Executes a query and return the first column of the first row in the result set.
            </summary>
            <typeparam name="T">The type that the result value should be cast to</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>The scalar value cast to T</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``1(System.String,System.Object[])">
            <summary>
                Runs a query and returns the result set as a typed list
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">The SQL query to execute</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A List holding the results of the query</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``1(PetaPoco.Sql)">
            <summary>
                Runs a query and returns the result set as a typed list
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A List holding the results of the query</returns>
        </member>
        <member name="M:PetaPoco.Database.BuildPageQueries``1(System.Int64,System.Int64,System.String,System.Object[]@,System.String@,System.String@)">
            <summary>
                Starting with a regular SELECT statement, derives the SQL statements required to query a
                DB for a page of records and the total number of records
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="skip">The number of rows to skip before the start of the page</param>
            <param name="take">The number of rows in the page</param>
            <param name="sql">The original SQL select statement</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <param name="sqlCount">Outputs the SQL statement to query for the total number of matching rows</param>
            <param name="sqlPage">Outputs the SQL statement to retrieve a single page of matching rows</param>
        </member>
        <member name="M:PetaPoco.Database.Page``1(System.Int64,System.Int64,System.String,System.Object[],System.String,System.Object[])">
            <summary>
                Retrieves a page of records	and the total number of available records
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="page">The 1 based page number to retrieve</param>
            <param name="itemsPerPage">The number of records per page</param>
            <param name="sqlCount">The SQL to retrieve the total number of records</param>
            <param name="countArgs">Arguments to any embedded parameters in the sqlCount statement</param>
            <param name="sqlPage">The SQL To retrieve a single page of results</param>
            <param name="pageArgs">Arguments to any embedded parameters in the sqlPage statement</param>
            <returns>A Page of results</returns>
            <remarks>
                This method allows separate SQL statements to be explicitly provided for the two parts of the page query.
                The page and itemsPerPage parameters are not used directly and are used simply to populate the returned Page
                object.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.Page``1(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
                Retrieves a page of records	and the total number of available records
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="page">The 1 based page number to retrieve</param>
            <param name="itemsPerPage">The number of records per page</param>
            <param name="sql">The base SQL query</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>A Page of results</returns>
            <remarks>
                PetaPoco will automatically modify the supplied SELECT statement to only retrieve the
                records for the specified page.  It will also execute a second query to retrieve the
                total number of records in the result set.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.Page``1(System.Int64,System.Int64,PetaPoco.Sql)">
            <summary>
                Retrieves a page of records	and the total number of available records
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="page">The 1 based page number to retrieve</param>
            <param name="itemsPerPage">The number of records per page</param>
            <param name="sql">An SQL builder object representing the base SQL query and it's arguments</param>
            <returns>A Page of results</returns>
            <remarks>
                PetaPoco will automatically modify the supplied SELECT statement to only retrieve the
                records for the specified page.  It will also execute a second query to retrieve the
                total number of records in the result set.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.Page``1(System.Int64,System.Int64,PetaPoco.Sql,PetaPoco.Sql)">
            <summary>
                Retrieves a page of records	and the total number of available records
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="page">The 1 based page number to retrieve</param>
            <param name="itemsPerPage">The number of records per page</param>
            <param name="sqlCount">An SQL builder object representing the SQL to retrieve the total number of records</param>
            <param name="sqlPage">An SQL builder object representing the SQL to retrieve a single page of results</param>
            <returns>A Page of results</returns>
            <remarks>
                This method allows separate SQL statements to be explicitly provided for the two parts of the page query.
                The page and itemsPerPage parameters are not used directly and are used simply to populate the returned Page
                object.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.Fetch``1(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
                Retrieves a page of records (without the total count)
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="page">The 1 based page number to retrieve</param>
            <param name="itemsPerPage">The number of records per page</param>
            <param name="sql">The base SQL query</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>A List of results</returns>
            <remarks>
                PetaPoco will automatically modify the supplied SELECT statement to only retrieve the
                records for the specified page.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.Fetch``1(System.Int64,System.Int64,PetaPoco.Sql)">
            <summary>
                Retrieves a page of records (without the total count)
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="page">The 1 based page number to retrieve</param>
            <param name="itemsPerPage">The number of records per page</param>
            <param name="sql">An SQL builder object representing the base SQL query and it's arguments</param>
            <returns>A List of results</returns>
            <remarks>
                PetaPoco will automatically modify the supplied SELECT statement to only retrieve the
                records for the specified page.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.SkipTake``1(System.Int64,System.Int64,System.String,System.Object[])">
            <summary>
                Retrieves a range of records from result set
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="skip">The number of rows at the start of the result set to skip over</param>
            <param name="take">The number of rows to retrieve</param>
            <param name="sql">The base SQL query</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>A List of results</returns>
            <remarks>
                PetaPoco will automatically modify the supplied SELECT statement to only retrieve the
                records for the specified range.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.SkipTake``1(System.Int64,System.Int64,PetaPoco.Sql)">
            <summary>
                Retrieves a range of records from result set
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="skip">The number of rows at the start of the result set to skip over</param>
            <param name="take">The number of rows to retrieve</param>
            <param name="sql">An SQL builder object representing the base SQL query and it's arguments</param>
            <returns>A List of results</returns>
            <remarks>
                PetaPoco will automatically modify the supplied SELECT statement to only retrieve the
                records for the specified range.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.Query``1(System.String,System.Object[])">
            <summary>
                Runs an SQL query, returning the results as an IEnumerable collection
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">The SQL query</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>An enumerable collection of result records</returns>
            <remarks>
                For some DB providers, care should be taken to not start a new Query before finishing with
                and disposing the previous one. In cases where this is an issue, consider using Fetch which
                returns the results as a List rather than an IEnumerable.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.Query``1(PetaPoco.Sql)">
            <summary>
                Runs an SQL query, returning the results as an IEnumerable collection
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">An SQL builder object representing the base SQL query and it's arguments</param>
            <returns>An enumerable collection of result records</returns>
            <remarks>
                For some DB providers, care should be taken to not start a new Query before finishing with
                and disposing the previous one. In cases where this is an issue, consider using Fetch which
                returns the results as a List rather than an IEnumerable.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.Exists``1(System.String,System.Object[])">
            <summary>
                Checks for the existence of a row matching the specified condition
            </summary>
            <typeparam name="T">The Type representing the table being queried</typeparam>
            <param name="sqlCondition">The SQL expression to be tested for (ie: the WHERE expression)</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>True if a record matching the condition is found.</returns>
        </member>
        <member name="M:PetaPoco.Database.Exists``1(System.Object)">
            <summary>
                Checks for the existence of a row with the specified primary key value.
            </summary>
            <typeparam name="T">The Type representing the table being queried</typeparam>
            <param name="primaryKey">The primary key value to look for</param>
            <returns>True if a record with the specified primary key value exists.</returns>
        </member>
        <member name="M:PetaPoco.Database.Single``1(System.Object)">
            <summary>
                Returns the record with the specified primary key value
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="primaryKey">The primary key value of the record to fetch</param>
            <returns>The single record matching the specified primary key value</returns>
            <remarks>
                Throws an exception if there are zero or more than one record with the specified primary key value.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.SingleOrDefault``1(System.Object)">
            <summary>
                Returns the record with the specified primary key value, or the default value if not found
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="primaryKey">The primary key value of the record to fetch</param>
            <returns>The single record matching the specified primary key value</returns>
            <remarks>
                If there are no records with the specified primary key value, default(T) (typically null) is returned.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.Single``1(System.String,System.Object[])">
            <summary>
                Runs a query that should always return a single row.
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">The SQL query</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>The single record matching the specified primary key value</returns>
            <remarks>
                Throws an exception if there are zero or more than one matching record
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.SingleOrDefault``1(System.String,System.Object[])">
            <summary>
                Runs a query that should always return either a single row, or no rows
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">The SQL query</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>The single record matching the specified primary key value, or default(T) if no matching rows</returns>
        </member>
        <member name="M:PetaPoco.Database.First``1(System.String,System.Object[])">
            <summary>
                Runs a query that should always return at least one return
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">The SQL query</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>The first record in the result set</returns>
        </member>
        <member name="M:PetaPoco.Database.FirstOrDefault``1(System.String,System.Object[])">
            <summary>
                Runs a query and returns the first record, or the default value if no matching records
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">The SQL query</param>
            <param name="args">Arguments to any embedded parameters in the SQL statement</param>
            <returns>The first record in the result set, or default(T) if no matching rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Single``1(PetaPoco.Sql)">
            <summary>
                Runs a query that should always return a single row.
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>The single record matching the specified primary key value</returns>
            <remarks>
                Throws an exception if there are zero or more than one matching record
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.SingleOrDefault``1(PetaPoco.Sql)">
            <summary>
                Runs a query that should always return either a single row, or no rows
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>The single record matching the specified primary key value, or default(T) if no matching rows</returns>
        </member>
        <member name="M:PetaPoco.Database.First``1(PetaPoco.Sql)">
            <summary>
                Runs a query that should always return at least one return
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>The first record in the result set</returns>
        </member>
        <member name="M:PetaPoco.Database.FirstOrDefault``1(PetaPoco.Sql)">
            <summary>
                Runs a query and returns the first record, or the default value if no matching records
            </summary>
            <typeparam name="T">The Type representing a row in the result set</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>The first record in the result set, or default(T) if no matching rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Insert(System.String,System.Object)">
            <summary>
                Performs an SQL Insert
            </summary>
            <param name="tableName">The name of the table to insert into</param>
            <param name="poco">The POCO object that specifies the column values to be inserted</param>
            <returns>The auto allocated primary key of the new record, or null for non-auto-increment tables</returns>
        </member>
        <member name="M:PetaPoco.Database.Insert(System.String,System.String,System.Object)">
            <summary>
                Performs an SQL Insert
            </summary>
            <param name="tableName">The name of the table to insert into</param>
            <param name="primaryKeyName">The name of the primary key column of the table</param>
            <param name="poco">The POCO object that specifies the column values to be inserted</param>
            <returns>The auto allocated primary key of the new record, or null for non-auto-increment tables</returns>
        </member>
        <member name="M:PetaPoco.Database.Insert(System.String,System.String,System.Boolean,System.Object)">
            <summary>
                Performs an SQL Insert
            </summary>
            <param name="tableName">The name of the table to insert into</param>
            <param name="primaryKeyName">The name of the primary key column of the table</param>
            <param name="autoIncrement">True if the primary key is automatically allocated by the DB</param>
            <param name="poco">The POCO object that specifies the column values to be inserted</param>
            <returns>The auto allocated primary key of the new record, or null for non-auto-increment tables</returns>
            <remarks>
                Inserts a poco into a table.  If the poco has a property with the same name
                as the primary key the id of the new record is assigned to it.  Either way,
                the new id is returned.
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.Insert(System.Object)">
            <summary>
                Performs an SQL Insert
            </summary>
            <param name="poco">The POCO object that specifies the column values to be inserted</param>
            <returns>The auto allocated primary key of the new record, or null for non-auto-increment tables</returns>
            <remarks>
                The name of the table, it's primary key and whether it's an auto-allocated primary key are retrieved
                from the POCO's attributes
            </remarks>
        </member>
        <member name="M:PetaPoco.Database.Update(System.String,System.String,System.Object,System.Object)">
            <summary>
                Performs an SQL update
            </summary>
            <param name="tableName">The name of the table to update</param>
            <param name="primaryKeyName">The name of the primary key column of the table</param>
            <param name="poco">The POCO object that specifies the column values to be updated</param>
            <param name="primaryKeyValue">The primary key of the record to be updated</param>
            <returns>The number of affected records</returns>
        </member>
        <member name="M:PetaPoco.Database.Update(System.String,System.String,System.Object,System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Performs an SQL update
            </summary>
            <param name="tableName">The name of the table to update</param>
            <param name="primaryKeyName">The name of the primary key column of the table</param>
            <param name="poco">The POCO object that specifies the column values to be updated</param>
            <param name="primaryKeyValue">The primary key of the record to be updated</param>
            <param name="columns">The column names of the columns to be updated, or null for all</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Update(System.String,System.String,System.Object)">
            <summary>
                Performs an SQL update
            </summary>
            <param name="tableName">The name of the table to update</param>
            <param name="primaryKeyName">The name of the primary key column of the table</param>
            <param name="poco">The POCO object that specifies the column values to be updated</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Update(System.String,System.String,System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Performs an SQL update
            </summary>
            <param name="tableName">The name of the table to update</param>
            <param name="primaryKeyName">The name of the primary key column of the table</param>
            <param name="poco">The POCO object that specifies the column values to be updated</param>
            <param name="columns">The column names of the columns to be updated, or null for all</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Update(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Performs an SQL update
            </summary>
            <param name="poco">The POCO object that specifies the column values to be updated</param>
            <param name="columns">The column names of the columns to be updated, or null for all</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Update(System.Object)">
            <summary>
                Performs an SQL update
            </summary>
            <param name="poco">The POCO object that specifies the column values to be updated</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Update(System.Object,System.Object)">
            <summary>
                Performs an SQL update
            </summary>
            <param name="poco">The POCO object that specifies the column values to be updated</param>
            <param name="primaryKeyValue">The primary key of the record to be updated</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Update(System.Object,System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Performs an SQL update
            </summary>
            <param name="poco">The POCO object that specifies the column values to be updated</param>
            <param name="primaryKeyValue">The primary key of the record to be updated</param>
            <param name="columns">The column names of the columns to be updated, or null for all</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Update``1(System.String,System.Object[])">
            <summary>
                Performs an SQL update
            </summary>
            <typeparam name="T">The POCO class who's attributes specify the name of the table to update</typeparam>
            <param name="sql">The SQL update and condition clause (ie: everything after "UPDATE tablename"</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Update``1(PetaPoco.Sql)">
            <summary>
                Performs an SQL update
            </summary>
            <typeparam name="T">The POCO class who's attributes specify the name of the table to update</typeparam>
            <param name="sql">
                An SQL builder object representing the SQL update and condition clause (ie: everything after "UPDATE
                tablename"
            </param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Delete(System.String,System.String,System.Object)">
            <summary>
                Performs and SQL Delete
            </summary>
            <param name="tableName">The name of the table to delete from</param>
            <param name="primaryKeyName">The name of the primary key column</param>
            <param name="poco">The POCO object whose primary key value will be used to delete the row</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:PetaPoco.Database.Delete(System.String,System.String,System.Object,System.Object)">
            <summary>
                Performs and SQL Delete
            </summary>
            <param name="tableName">The name of the table to delete from</param>
            <param name="primaryKeyName">The name of the primary key column</param>
            <param name="poco">
                The POCO object whose primary key value will be used to delete the row (or null to use the supplied
                primary key value)
            </param>
            <param name="primaryKeyValue">
                The value of the primary key identifing the record to be deleted (or null, or get this
                value from the POCO instance)
            </param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:PetaPoco.Database.Delete(System.Object)">
            <summary>
                Performs an SQL Delete
            </summary>
            <param name="poco">The POCO object specifying the table name and primary key value of the row to be deleted</param>
            <returns>The number of rows affected</returns>
        </member>
        <member name="M:PetaPoco.Database.Delete``1(System.Object)">
            <summary>
                Performs an SQL Delete
            </summary>
            <typeparam name="T">The POCO class whose attributes identify the table and primary key to be used in the delete</typeparam>
            <param name="pocoOrPrimaryKey">The value of the primary key of the row to delete</param>
            <returns></returns>
        </member>
        <member name="M:PetaPoco.Database.Delete``1(System.String,System.Object[])">
            <summary>
                Performs an SQL Delete
            </summary>
            <typeparam name="T">The POCO class who's attributes specify the name of the table to delete from</typeparam>
            <param name="sql">The SQL condition clause identifying the row to delete (ie: everything after "DELETE FROM tablename"</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.Database.Delete``1(PetaPoco.Sql)">
            <summary>
                Performs an SQL Delete
            </summary>
            <typeparam name="T">The POCO class who's attributes specify the name of the table to delete from</typeparam>
            <param name="sql">
                An SQL builder object representing the SQL condition clause identifying the row to delete (ie:
                everything after "UPDATE tablename"
            </param>
            <returns>The number of affected rows</returns>
        </member>
        <member name="M:PetaPoco.Database.IsNew(System.String,System.Object)">
            <summary>
                Check if a poco represents a new row
            </summary>
            <param name="primaryKeyName">The name of the primary key column</param>
            <param name="poco">The object instance whose "newness" is to be tested</param>
            <returns>True if the POCO represents a record already in the database</returns>
            <remarks>This method simply tests if the POCO's primary key column property has been set to something non-zero.</remarks>
        </member>
        <member name="M:PetaPoco.Database.IsNew(System.Object)">
            <summary>
                Check if a poco represents a new row
            </summary>
            <param name="poco">The object instance whose "newness" is to be tested</param>
            <returns>True if the POCO represents a record already in the database</returns>
            <remarks>This method simply tests if the POCO's primary key column property has been set to something non-zero.</remarks>
        </member>
        <member name="M:PetaPoco.Database.Save(System.String,System.String,System.Object)">
            <summary>
                Saves a POCO by either performing either an SQL Insert or SQL Update
            </summary>
            <param name="tableName">The name of the table to be updated</param>
            <param name="primaryKeyName">The name of the primary key column</param>
            <param name="poco">The POCO object to be saved</param>
        </member>
        <member name="M:PetaPoco.Database.Save(System.Object)">
            <summary>
                Saves a POCO by either performing either an SQL Insert or SQL Update
            </summary>
            <param name="poco">The POCO object to be saved</param>
        </member>
        <member name="M:PetaPoco.Database.Fetch``3(System.Func{``0,``1,``2},System.String,System.Object[])">
            <summary>
                Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="TRet">The returned list POCO type</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``4(System.Func{``0,``1,``2,``3},System.String,System.Object[])">
            <summary>
                Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="TRet">The returned list POCO type</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Object[])">
            <summary>
                Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <typeparam name="TRet">The returned list POCO type</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``6(System.Func{``0,``1,``2,``3,``4,``5},System.String,System.Object[])">
            <summary>
                Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <typeparam name="T5">The fifth POCO type</typeparam>
            <typeparam name="TRet">The returned list POCO type</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``3(System.Func{``0,``1,``2},System.String,System.Object[])">
            <summary>
                Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``4(System.Func{``0,``1,``2,``3},System.String,System.Object[])">
            <summary>
                Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``5(System.Func{``0,``1,``2,``3,``4},System.String,System.Object[])">
            <summary>
                Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``6(System.Func{``0,``1,``2,``3,``4,``5},System.String,System.Object[])">
            <summary>
                Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <typeparam name="T5">The fifth POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``3(System.Func{``0,``1,``2},PetaPoco.Sql)">
            <summary>
                Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="TRet">The returned list POCO type</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``4(System.Func{``0,``1,``2,``3},PetaPoco.Sql)">
            <summary>
                Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="TRet">The returned list POCO type</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``5(System.Func{``0,``1,``2,``3,``4},PetaPoco.Sql)">
            <summary>
                Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <typeparam name="TRet">The returned list POCO type</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``6(System.Func{``0,``1,``2,``3,``4,``5},PetaPoco.Sql)">
            <summary>
                Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <typeparam name="T5">The fifth POCO type</typeparam>
            <typeparam name="TRet">The returned list POCO type</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``3(System.Func{``0,``1,``2},PetaPoco.Sql)">
            <summary>
                Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``4(System.Func{``0,``1,``2,``3},PetaPoco.Sql)">
            <summary>
                Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``5(System.Func{``0,``1,``2,``3,``4},PetaPoco.Sql)">
            <summary>
                Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``6(System.Func{``0,``1,``2,``3,``4,``5},PetaPoco.Sql)">
            <summary>
                Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <typeparam name="T5">The fifth POCO type</typeparam>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``2(System.String,System.Object[])">
            <summary>
                Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``3(System.String,System.Object[])">
            <summary>
                Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``4(System.String,System.Object[])">
            <summary>
                Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``5(System.String,System.Object[])">
            <summary>
                Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <typeparam name="T5">The fifth POCO type</typeparam>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``2(System.String,System.Object[])">
            <summary>
                Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``3(System.String,System.Object[])">
            <summary>
                Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``4(System.String,System.Object[])">
            <summary>
                Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``5(System.String,System.Object[])">
            <summary>
                Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <typeparam name="T5">The fifth POCO type</typeparam>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``2(PetaPoco.Sql)">
            <summary>
                Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``3(PetaPoco.Sql)">
            <summary>
                Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``4(PetaPoco.Sql)">
            <summary>
                Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Fetch``5(PetaPoco.Sql)">
            <summary>
                Perform a multi-poco fetch
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <typeparam name="T5">The fifth POCO type</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as a List</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``2(PetaPoco.Sql)">
            <summary>
                Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``3(PetaPoco.Sql)">
            <summary>
                Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``4(PetaPoco.Sql)">
            <summary>
                Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``5(PetaPoco.Sql)">
            <summary>
                Perform a multi-poco query
            </summary>
            <typeparam name="T1">The first POCO type</typeparam>
            <typeparam name="T2">The second POCO type</typeparam>
            <typeparam name="T3">The third POCO type</typeparam>
            <typeparam name="T4">The fourth POCO type</typeparam>
            <typeparam name="T5">The fifth POCO type</typeparam>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.Query``1(System.Type[],System.Object,System.String,System.Object[])">
            <summary>
                Performs a multi-poco query
            </summary>
            <typeparam name="TRet">The type of objects in the returned IEnumerable</typeparam>
            <param name="types">An array of Types representing the POCO types of the returned result set.</param>
            <param name="cb">A callback function to connect the POCO instances, or null to automatically guess the relationships</param>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A collection of POCO's as an IEnumerable</returns>
        </member>
        <member name="M:PetaPoco.Database.QueryMultiple(PetaPoco.Sql)">
            <summary>
            Perform a multi-results set query
            </summary>
            <param name="sql">An SQL builder object representing the query and it's arguments</param>
            <returns>A GridReader to be queried</returns>
        </member>
        <member name="M:PetaPoco.Database.QueryMultiple(System.String,System.Object[])">
            <summary>
            Perform a multi-results set query
            </summary>
            <param name="sql">The SQL query to be executed</param>
            <param name="args">Arguments to any embedded parameters in the SQL</param>
            <returns>A GridReader to be queried</returns>
        </member>
        <member name="P:PetaPoco.Database.LastSQL">
            <summary>
                Retrieves the SQL of the last executed statement
            </summary>
        </member>
        <member name="P:PetaPoco.Database.LastArgs">
            <summary>
                Retrieves the arguments to the last execute statement
            </summary>
        </member>
        <member name="P:PetaPoco.Database.LastCommand">
            <summary>
                Returns a formatted string describing the last executed SQL statement and it's argument values
            </summary>
        </member>
        <member name="M:PetaPoco.Database.FormatCommand(System.Data.IDbCommand)">
            <summary>
                Formats the contents of a DB command for display
            </summary>
            <param name="cmd"></param>
            <returns></returns>
        </member>
        <member name="M:PetaPoco.Database.FormatCommand(System.String,System.Object[])">
            <summary>
                Formats an SQL query and it's arguments for display
            </summary>
            <param name="sql"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="P:PetaPoco.Database.DefaultMapper">
            <summary>
                Gets the default mapper.
            </summary>
        </member>
        <member name="P:PetaPoco.Database.EnableAutoSelect">
            <summary>
                When set to true, PetaPoco will automatically create the "SELECT columns" part of any query that looks like it
                needs it
            </summary>
        </member>
        <member name="P:PetaPoco.Database.EnableNamedParams">
            <summary>
                When set to true, parameters can be named ?myparam and populated from properties of the passed in argument values.
            </summary>
        </member>
        <member name="P:PetaPoco.Database.CommandTimeout">
            <summary>
                Sets the timeout value for all SQL statements.
            </summary>
        </member>
        <member name="P:PetaPoco.Database.OneTimeCommandTimeout">
            <summary>
                Sets the timeout value for the next (and only next) SQL statement
            </summary>
        </member>
        <member name="P:PetaPoco.Database.Provider">
            <summary>
                Gets the loaded database provider. <seealso cref="P:PetaPoco.Database.Provider" />.
            </summary>
            <returns>
                The loaded database type.
            </returns>
        </member>
        <member name="P:PetaPoco.Database.ConnectionString">
            <summary>
                Gets the connection string.
            </summary>
            <returns>
                The connection string.
            </returns>
        </member>
        <member name="P:PetaPoco.Database.IsolationLevel">
            <summary>
                Gets or sets the transaction isolation level.
            </summary>
            <remarks>
                When value is null, the underlying providers default isolation level is used.
            </remarks>
        </member>
    </members>
</doc>
